From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: TehBrian <tehbrian@outlook.com>
Date: Sat, 26 Jun 2021 14:58:50 -0400
Subject: [PATCH] Add ItemStack#removeEnchantments


diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index a7909406e9d54c1ab4789b984ed6b1da50837fce..b76262f3737483265a0c0a618fe15da9e8595083 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -1,6 +1,7 @@
 package org.bukkit.inventory;
 
 import com.google.common.collect.ImmutableMap;
+import java.util.HashMap; // Paper
 import java.util.LinkedHashMap;
 import java.util.List; // Paper
 import java.util.Map;
@@ -451,6 +452,38 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
         return level;
     }
 
+    // Paper start - add #removeEnchantments
+    /**
+     * Removes the specified {@link Enchantment}s from this {@code ItemStack}.
+     * <p>
+     * This method is the same as calling {@link #removeEnchantment(Enchantment)}
+     * for each {@code Enchantment} in the given array.
+     *
+     * @param enchantments the {@code Enchantment}s to remove
+     * @return a {@code Map} containing the successfully removed {@code Enchantment}s,
+     *         where the key is the {@code Enchantment} removed,
+     *         and the value is what level the enchantment was
+     * @throws IllegalArgumentException if the given array of {@code Enchantment}s is {@code null}
+     *                                  or an element in the array is {@code null}
+     */
+    @Utility
+    public @NotNull Map<@NotNull Enchantment, @NotNull Integer> removeEnchantments(final @NotNull Enchantment... enchantments) throws IllegalArgumentException {
+        Validate.noNullElements(enchantments, "Enchantments cannot be null");
+
+        final @NotNull Map<@NotNull Enchantment, @NotNull Integer> enchantmentsRemoved = new HashMap<>();
+
+        for (final Enchantment enchantment : enchantments) {
+            final int previousLevel = this.removeEnchantment(enchantment);
+
+            if (previousLevel != 0) {
+                enchantmentsRemoved.put(enchantment, previousLevel);
+            }
+        }
+
+        return enchantmentsRemoved;
+    }
+    // Paper end
+
     @Override
     @NotNull
     @Utility
