From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jason Penilla <11360596+jpenilla@users.noreply.github.com>
Date: Wed, 18 Nov 2020 20:52:25 -0800
Subject: [PATCH] Entity load/save limit per chunk

Adds a config option to limit the number of entities saved and loaded
to a chunk. The default values of -1 disable the limit. Although
defaults are only included for certain entites, this allows setting
limits for any entity type.

diff --git a/src/main/java/io/papermc/paper/PaperWorldConfig.java b/src/main/java/io/papermc/paper/PaperWorldConfig.java
index a95697280da5e015733563f1181f7f1872d6159a..5f523ee51697cd165a332bdd9614c217fd97e2c3 100644
--- a/src/main/java/io/papermc/paper/PaperWorldConfig.java
+++ b/src/main/java/io/papermc/paper/PaperWorldConfig.java
@@ -1,9 +1,12 @@
 package io.papermc.paper;
 
 import java.util.Arrays;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.stream.Collectors;
 import net.minecraft.world.Difficulty;
+import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.monster.Vindicator;
 import net.minecraft.world.entity.monster.Zombie;
 import io.papermc.paper.antixray.ChunkPacketBlockControllerAntiXray.EngineMode;
@@ -123,6 +126,20 @@ public class PaperWorldConfig {
         );
     }
 
+    public Map<EntityType<?>, Integer> entityPerChunkSaveLimits = new HashMap<>();
+    private void entityPerChunkSaveLimits() {
+        getInt("entity-per-chunk-save-limit.experience_orb", -1);
+        getInt("entity-per-chunk-save-limit.snowball", -1);
+        getInt("entity-per-chunk-save-limit.ender_pearl", -1);
+        getInt("entity-per-chunk-save-limit.arrow", -1);
+        EntityType.getEntityNameList().forEach(name -> {
+            final EntityType<?> type = EntityType.byString(name.getPath()).orElseThrow(() -> new IllegalStateException("Unknown Entity Type: " + name.toString()));
+            final String path = ".entity-per-chunk-save-limit." + name.getPath();
+            final int value = config.getInt("world-settings." + worldName + path, config.getInt("world-settings.default" + path, -1)); // get without setting defaults
+            if (value != -1) entityPerChunkSaveLimits.put(type, value);
+        });
+    }
+
     public short keepLoadedRange;
     private void keepLoadedRange() {
         keepLoadedRange = (short) (getInt("keep-spawn-loaded-range", Math.min(spigotConfig.viewDistance, 10)) * 16);
diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index 302a9511aa4633dfa2f06824a4d6bbaa1723e7f9..e285c26d0d082a553a19ffd334a9a9abad015187 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -560,9 +560,20 @@ public class EntityType<T extends Entity> implements EntityTypeTest<Entity, T> {
         final Spliterator<? extends net.minecraft.nbt.Tag> spliterator = entityNbtList.spliterator();
 
         return StreamSupport.stream(new Spliterator<Entity>() {
+            final java.util.Map<EntityType<?>, Integer> loadedEntityCounts = new java.util.HashMap<>(); // Paper
             public boolean tryAdvance(Consumer<? super Entity> consumer) {
                 return spliterator.tryAdvance((nbtbase) -> {
                     EntityType.loadEntityRecursive((CompoundTag) nbtbase, world, (entity) -> {
+                        // Paper start
+                        final EntityType<?> entityType = entity.getType();
+                        final int saveLimit = world.paperConfig.entityPerChunkSaveLimits.getOrDefault(entityType, -1);
+                        if (saveLimit > -1) {
+                            if (this.loadedEntityCounts.getOrDefault(entityType, 0) >= saveLimit) {
+                                return null;
+                            }
+                            this.loadedEntityCounts.merge(entityType, 1, Integer::sum);
+                        }
+                        // Paper end
                         consumer.accept(entity);
                         return entity;
                     });
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
index 6204c6c9cf2cb620e41105889807f85438bd006c..572a013445bd83d366cce27d0e015ba8271df7e0 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
@@ -89,7 +89,18 @@ public class EntityStorage implements EntityPersistentStorage<Entity> {
 
         } else {
             ListTag listTag = new ListTag();
+            final java.util.Map<net.minecraft.world.entity.EntityType<?>, Integer> savedEntityCounts = new java.util.HashMap<>(); // Paper
             dataList.getEntities().forEach((entity) -> {
+                // Paper start
+                final EntityType<?> entityType = entity.getType();
+                final int saveLimit = this.level.paperConfig.entityPerChunkSaveLimits.getOrDefault(entityType, -1);
+                if (saveLimit > -1) {
+                    if (savedEntityCounts.getOrDefault(entityType, 0) >= saveLimit) {
+                        return;
+                    }
+                    savedEntityCounts.merge(entityType, 1, Integer::sum);
+                }
+                // Paper end
                 CompoundTag compoundTag = new CompoundTag();
                 if (entity.save(compoundTag)) {
                     listTag.add(compoundTag);
