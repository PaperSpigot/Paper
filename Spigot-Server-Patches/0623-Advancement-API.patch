From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Tue, 29 Dec 2020 15:19:32 -0800
Subject: [PATCH] Advancement API


diff --git a/src/main/java/io/papermc/paper/advancements/AdvancementDisplayAdapter.java b/src/main/java/io/papermc/paper/advancements/AdvancementDisplayAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..8c3886a5587eb6df76c8267596315b3ba53344f4
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/AdvancementDisplayAdapter.java
@@ -0,0 +1,51 @@
+package io.papermc.paper.advancements;
+
+public class AdvancementDisplayAdapter implements com.google.gson.JsonDeserializer<AdvancementDisplay>, com.google.gson.JsonSerializer<AdvancementDisplay> {
+
+    private static final String TITLE = "title";
+    private static final String DESCRIPTION = "description";
+    private static final String ICON = "icon";
+    private static final String FRAME = "frame";
+    private static final String BACKGROUND = "background";
+    private static final String SHOW_TOAST = "show_toast";
+    private static final String ANNOUNCE_TO_CHAT = "announce_to_chat";
+    private static final String HIDDEN = "hidden";
+
+    @Override
+    public io.papermc.paper.advancements.AdvancementDisplay deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {
+        com.google.gson.JsonObject jsonObject = json.getAsJsonObject();
+        String title = org.bukkit.craftbukkit.util.CraftChatMessage.fromComponent(net.minecraft.server.IChatBaseComponent.ChatSerializer.a(jsonObject.get(TITLE))); // TODO Component
+        String description = org.bukkit.craftbukkit.util.CraftChatMessage.fromComponent(net.minecraft.server.IChatBaseComponent.ChatSerializer.a(jsonObject.get(DESCRIPTION))); // TODO Component
+        org.bukkit.inventory.ItemStack icon = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(net.minecraft.server.AdvancementDisplay.deserializeItemStack(net.minecraft.server.ChatDeserializer.getJsonObject(jsonObject, ICON)));
+        org.bukkit.NamespacedKey background = org.bukkit.craftbukkit.util.CraftNamespacedKey.fromStringOrNull(io.papermc.paper.util.PaperChatDeserializer.getStringOrDefault(jsonObject, BACKGROUND, (String) null));
+        io.papermc.paper.advancements.AdvancementDisplay.AdvancementFrameType frameType = io.papermc.paper.advancements.AdvancementDisplay.AdvancementFrameType.getByText(io.papermc.paper.util.PaperChatDeserializer.getStringOrDefault(jsonObject, FRAME, io.papermc.paper.advancements.AdvancementDisplay.AdvancementFrameType.TASK.getText()));
+        boolean showToast = io.papermc.paper.util.PaperChatDeserializer.getBooleanOrDefault(jsonObject, SHOW_TOAST, true);
+        boolean announceToChat = io.papermc.paper.util.PaperChatDeserializer.getBooleanOrDefault(jsonObject, ANNOUNCE_TO_CHAT, true);
+        boolean hidden = io.papermc.paper.util.PaperChatDeserializer.getBooleanOrDefault(jsonObject, HIDDEN, false);
+        return new io.papermc.paper.advancements.AdvancementDisplay(title, description, icon, background, frameType, showToast, announceToChat, hidden);
+    }
+
+    @Override
+    public com.google.gson.JsonElement serialize(io.papermc.paper.advancements.AdvancementDisplay src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {
+        com.google.gson.JsonObject jsonObject = new com.google.gson.JsonObject();
+        jsonObject.add(TITLE, net.minecraft.server.IChatBaseComponent.ChatSerializer.b(org.bukkit.craftbukkit.util.CraftChatMessage.fromStringOrNull(src.title()))); // TODO Component
+        jsonObject.add(DESCRIPTION, net.minecraft.server.IChatBaseComponent.ChatSerializer.b(org.bukkit.craftbukkit.util.CraftChatMessage.fromStringOrNull(src.description()))); // TODO Component
+        jsonObject.add(ICON, serializeItemStack(src.getIcon()));
+        jsonObject.addProperty(FRAME, src.getFrame().getText());
+        if (src.getBackground() != null) jsonObject.addProperty(BACKGROUND, src.getBackground().toString());
+        jsonObject.addProperty(SHOW_TOAST, src.getShowToast());
+        jsonObject.addProperty(ANNOUNCE_TO_CHAT, src.getAnnounceToChat());
+        jsonObject.addProperty(HIDDEN, src.getHidden());
+        return jsonObject;
+    }
+
+    private static com.google.gson.JsonElement serializeItemStack(org.bukkit.inventory.ItemStack itemStack) {
+        net.minecraft.server.ItemStack nmsItemStack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(itemStack);
+        com.google.gson.JsonObject jsonObject = new com.google.gson.JsonObject();
+        jsonObject.addProperty("item", net.minecraft.server.IRegistry.ITEM.getKey(nmsItemStack.getItem()).toString());
+        if (nmsItemStack.hasTag()) {
+            jsonObject.addProperty("nbt", nmsItemStack.getTag().toString());
+        }
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/AdvancementRewardsAdapter.java b/src/main/java/io/papermc/paper/advancements/AdvancementRewardsAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..844059ad961e2276e3e424267eb6298cc8e92a3c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/AdvancementRewardsAdapter.java
@@ -0,0 +1,61 @@
+package io.papermc.paper.advancements;
+
+public class AdvancementRewardsAdapter implements com.google.gson.JsonDeserializer<AdvancementRewards>, com.google.gson.JsonSerializer<AdvancementRewards> {
+
+    private static final String RECIPES = "recipes";
+    private static final String LOOT = "loot";
+    private static final String EXP = "experience";
+    private static final String FUNCTION = "function";
+
+    @Override
+    public io.papermc.paper.advancements.AdvancementRewards deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {
+        com.google.gson.JsonObject jsonObject = json.getAsJsonObject();
+        int exp = io.papermc.paper.util.PaperChatDeserializer.getIntOrDefault(jsonObject, EXP, 0);
+        com.google.gson.JsonArray lootArray = io.papermc.paper.util.PaperChatDeserializer.getJsonArrayOrDefault(jsonObject, LOOT, new com.google.gson.JsonArray());
+        java.util.List<org.bukkit.NamespacedKey> loot = new java.util.ArrayList<>(lootArray.size());
+        for (int i = 0; i < loot.size(); i++) {
+            loot.set(i, org.bukkit.craftbukkit.util.CraftNamespacedKey.fromString(net.minecraft.server.ChatDeserializer.getStringRaw(lootArray.get(i), LOOT + "[" + i + "]")));
+        }
+        com.google.gson.JsonArray recipeArray = io.papermc.paper.util.PaperChatDeserializer.getJsonArrayOrDefault(jsonObject, RECIPES, new com.google.gson.JsonArray());
+        java.util.List<org.bukkit.NamespacedKey> recipes = new java.util.ArrayList<>(recipeArray.size());
+        for (int i = 0; i < recipes.size(); i++) {
+            recipes.set(i, org.bukkit.craftbukkit.util.CraftNamespacedKey.fromString(net.minecraft.server.ChatDeserializer.getStringRaw(lootArray.get(i), RECIPES + "[" + i + "]")));
+        }
+        org.bukkit.NamespacedKey function = null;
+        if (jsonObject.has("function")) {
+            function = org.bukkit.craftbukkit.util.CraftNamespacedKey.fromString(net.minecraft.server.ChatDeserializer.getString(jsonObject, FUNCTION));
+        }
+        return new io.papermc.paper.advancements.AdvancementRewards(exp, loot, recipes, function);
+    }
+
+    @Override
+    public com.google.gson.JsonElement serialize(io.papermc.paper.advancements.AdvancementRewards src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {
+        if (io.papermc.paper.advancements.AdvancementRewards.isEmpty(src)) {
+            return com.google.gson.JsonNull.INSTANCE;
+        } else {
+            com.google.gson.JsonObject jsonObject = new com.google.gson.JsonObject();
+            if (src.getExp() != 0) {
+                jsonObject.addProperty(EXP, src.getExp());
+            }
+            com.google.gson.JsonArray jsonArray;
+            if (src.getLoot().size() > 0) {
+                jsonArray = new com.google.gson.JsonArray();
+                for (org.bukkit.NamespacedKey lootKey : src.getLoot()) {
+                    jsonArray.add(lootKey.toString());
+                }
+                jsonObject.add(LOOT, jsonArray);
+            }
+            if (src.getRecipes().size() > 0) {
+                jsonArray = new com.google.gson.JsonArray();
+                for (org.bukkit.NamespacedKey recipeKey : src.getRecipes()) {
+                    jsonArray.add(recipeKey.toString());
+                }
+                jsonObject.add(RECIPES, jsonArray);
+            }
+            if (src.getFunction() != null) {
+                jsonObject.addProperty(FUNCTION, src.getFunction().toString());
+            }
+            return jsonObject;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/AdvancementTriggers.java b/src/main/java/io/papermc/paper/advancements/AdvancementTriggers.java
new file mode 100644
index 0000000000000000000000000000000000000000..26ce9c892ea63056b78e37efc138f598074daaa1
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/AdvancementTriggers.java
@@ -0,0 +1,157 @@
+package io.papermc.paper.advancements;
+
+import com.google.common.collect.Maps;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import io.papermc.paper.advancements.triggers.AbstractLocationTrigger.HeroOfTheVillageTrigger;
+import io.papermc.paper.advancements.triggers.AbstractLocationTrigger.LocationTrigger;
+import io.papermc.paper.advancements.triggers.AbstractLocationTrigger.SleptInBedTrigger;
+import io.papermc.paper.advancements.triggers.AbstractLocationTrigger.VoluntaryExileTrigger;
+import io.papermc.paper.advancements.triggers.AbstractLocationTriggerAdapter;
+import io.papermc.paper.advancements.triggers.AbstractLocationTriggerAdapter.HeroOfTheVillageTriggerAdapter;
+import io.papermc.paper.advancements.triggers.AbstractLocationTriggerAdapter.LocationTriggerAdapter;
+import io.papermc.paper.advancements.triggers.AbstractLocationTriggerAdapter.SleptInBedTriggerAdapter;
+import io.papermc.paper.advancements.triggers.AbstractLocationTriggerAdapter.VoluntaryExileTriggerAdapter;
+import io.papermc.paper.advancements.triggers.BredAnimalsTrigger;
+import io.papermc.paper.advancements.triggers.BredAnimalsTriggerAdapter;
+import io.papermc.paper.advancements.triggers.BrewedPotionTrigger;
+import io.papermc.paper.advancements.triggers.BrewedPotionTriggerAdapter;
+import io.papermc.paper.advancements.triggers.ChangedDimensionTrigger;
+import io.papermc.paper.advancements.triggers.ChangedDimensionTriggerAdapter;
+import io.papermc.paper.advancements.triggers.ChanneledLightningTrigger;
+import io.papermc.paper.advancements.triggers.ConstructBeaconTrigger;
+import io.papermc.paper.advancements.triggers.ConstructBeaconTriggerAdapter;
+import io.papermc.paper.advancements.triggers.ConsumeItemTrigger;
+import io.papermc.paper.advancements.triggers.ConsumeItemTriggerAdapter;
+import io.papermc.paper.advancements.triggers.CuredZombieVillagerTrigger;
+import io.papermc.paper.advancements.triggers.CuredZombieVillagerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.EffectsChangedTrigger;
+import io.papermc.paper.advancements.triggers.EffectsChangedTriggerAdapter;
+import io.papermc.paper.advancements.triggers.EnchantedItemTrigger;
+import io.papermc.paper.advancements.triggers.EnchantedItemTriggerAdapter;
+import io.papermc.paper.advancements.triggers.EntityHurtPlayerTrigger;
+import io.papermc.paper.advancements.triggers.FilledBucketTrigger;
+import io.papermc.paper.advancements.triggers.FilledBucketTriggerAdapter;
+import io.papermc.paper.advancements.triggers.FishingRodHookedTrigger;
+import io.papermc.paper.advancements.triggers.FishingRodHookedTriggerAdapter;
+import io.papermc.paper.advancements.triggers.GenerateLootTableTrigger;
+import io.papermc.paper.advancements.triggers.GenerateLootTableTriggerAdapter;
+import io.papermc.paper.advancements.triggers.InteractBlockTrigger;
+import io.papermc.paper.advancements.triggers.InteractBlockTriggerAdapter;
+import io.papermc.paper.advancements.triggers.ItemDurabilityChangeTrigger;
+import io.papermc.paper.advancements.triggers.ItemDurabilityChangeTriggerAdapter;
+import io.papermc.paper.advancements.triggers.KilledByCrossbowTrigger;
+import io.papermc.paper.advancements.triggers.KilledByCrossbowTriggerAdapter;
+import io.papermc.paper.advancements.triggers.LevitationTrigger;
+import io.papermc.paper.advancements.triggers.LevitationTriggerAdapter;
+import io.papermc.paper.advancements.triggers.NetherTravelTrigger;
+import io.papermc.paper.advancements.triggers.NetherTravelTriggerAdapter;
+import io.papermc.paper.advancements.triggers.PlacedBlockTrigger;
+import io.papermc.paper.advancements.triggers.PlacedBlockTriggerAdapter;
+import io.papermc.paper.advancements.triggers.PlayerInteractWithEntityTrigger;
+import io.papermc.paper.advancements.triggers.PlayerInteractWithEntityTriggerAdapter;
+import io.papermc.paper.advancements.triggers.ShotCrossbowTrigger;
+import io.papermc.paper.advancements.triggers.ShotCrossbowTriggerAdapter;
+import io.papermc.paper.advancements.triggers.SlideDownBlockTrigger;
+import io.papermc.paper.advancements.triggers.SlideDownBlockTriggerAdapter;
+import io.papermc.paper.advancements.triggers.SummonedEntityTrigger;
+import io.papermc.paper.advancements.triggers.SummonedEntityTriggerAdapter;
+import io.papermc.paper.advancements.triggers.TamedAnimalTrigger;
+import io.papermc.paper.advancements.triggers.TamedAnimalTriggerAdapter;
+import io.papermc.paper.advancements.triggers.TargetHitTrigger;
+import io.papermc.paper.advancements.triggers.TargetHitTriggerAdapter;
+import io.papermc.paper.advancements.triggers.ThrownItemPickedUpTrigger;
+import io.papermc.paper.advancements.triggers.ThrownItemPickedUpTriggerAdapter;
+import io.papermc.paper.advancements.triggers.TickTrigger;
+import io.papermc.paper.advancements.triggers.TickTriggerAdapter;
+import io.papermc.paper.advancements.triggers.TriggerAdapter;
+import io.papermc.paper.advancements.triggers.BeeNestDestroyedTrigger;
+import io.papermc.paper.advancements.triggers.BeeNestDestroyedTriggerAdapter;
+import io.papermc.paper.advancements.triggers.EnterBlockTrigger;
+import io.papermc.paper.advancements.triggers.EnterBlockTriggerAdapter;
+import io.papermc.paper.advancements.triggers.ImpossibleTrigger;
+import io.papermc.paper.advancements.triggers.ImpossibleTriggerAdapter;
+import io.papermc.paper.advancements.triggers.InventoryChangedTrigger;
+import io.papermc.paper.advancements.triggers.InventoryChangedTriggerAdapter;
+import io.papermc.paper.advancements.triggers.KilledTrigger.EntityKilledPlayerTrigger;
+import io.papermc.paper.advancements.triggers.KilledTrigger.PlayerKilledEntityTrigger;
+import io.papermc.paper.advancements.triggers.KilledTriggerAdapter.EntityKilledPlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.KilledTriggerAdapter.PlayerKilledEntityTriggerAdapter;
+import io.papermc.paper.advancements.triggers.PlayerHurtEntityTrigger;
+import io.papermc.paper.advancements.triggers.PlayerHurtEntityTriggerAdapter;
+import io.papermc.paper.advancements.triggers.RecipeUnlockedTrigger;
+import io.papermc.paper.advancements.triggers.RecipeUnlockedTriggerAdapter;
+import io.papermc.paper.advancements.triggers.UsedEnderEyeTrigger;
+import io.papermc.paper.advancements.triggers.UsedEnderEyeTriggerAdapter;
+import io.papermc.paper.advancements.triggers.UsedTotemTrigger;
+import io.papermc.paper.advancements.triggers.UsedTotemTriggerAdapter;
+import io.papermc.paper.advancements.triggers.VillagerTradeTrigger;
+import io.papermc.paper.advancements.triggers.VillagerTradeTriggerAdapter;
+import net.minecraft.server.ChatDeserializer;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+
+import java.util.Map;
+
+public class AdvancementTriggers {
+
+    public static final Map<NamespacedKey, TriggerAdapter<?>> TRIGGER_MAP = Maps.newHashMap();
+
+    static {
+        TRIGGER_MAP.put(ImpossibleTrigger.KEY, new ImpossibleTriggerAdapter());
+        TRIGGER_MAP.put(PlayerKilledEntityTrigger.KEY, new PlayerKilledEntityTriggerAdapter());
+        TRIGGER_MAP.put(EntityKilledPlayerTrigger.KEY, new EntityKilledPlayerTriggerAdapter());
+        TRIGGER_MAP.put(EnterBlockTrigger.KEY, new EnterBlockTriggerAdapter());
+        TRIGGER_MAP.put(InventoryChangedTrigger.KEY, new InventoryChangedTriggerAdapter());
+        TRIGGER_MAP.put(RecipeUnlockedTrigger.KEY, new RecipeUnlockedTriggerAdapter());
+        TRIGGER_MAP.put(PlayerHurtEntityTrigger.KEY, new PlayerHurtEntityTriggerAdapter());
+        TRIGGER_MAP.put(EntityHurtPlayerTrigger.KEY, new EntityKilledPlayerTriggerAdapter());
+        TRIGGER_MAP.put(EnchantedItemTrigger.KEY, new EnchantedItemTriggerAdapter());
+        TRIGGER_MAP.put(FilledBucketTrigger.KEY, new FilledBucketTriggerAdapter());
+        TRIGGER_MAP.put(BrewedPotionTrigger.KEY, new BrewedPotionTriggerAdapter());
+        TRIGGER_MAP.put(ConstructBeaconTrigger.KEY, new ConstructBeaconTriggerAdapter());
+        TRIGGER_MAP.put(UsedEnderEyeTrigger.KEY, new UsedEnderEyeTriggerAdapter());
+        TRIGGER_MAP.put(SummonedEntityTrigger.KEY, new SummonedEntityTriggerAdapter());
+        TRIGGER_MAP.put(BredAnimalsTrigger.KEY, new BredAnimalsTriggerAdapter());
+        TRIGGER_MAP.put(LocationTrigger.KEY, new LocationTriggerAdapter());
+        TRIGGER_MAP.put(SleptInBedTrigger.KEY, new SleptInBedTriggerAdapter());
+        TRIGGER_MAP.put(CuredZombieVillagerTrigger.KEY, new CuredZombieVillagerTriggerAdapter());
+        TRIGGER_MAP.put(VillagerTradeTrigger.KEY, new VillagerTradeTriggerAdapter());
+        TRIGGER_MAP.put(ItemDurabilityChangeTrigger.KEY, new ItemDurabilityChangeTriggerAdapter());
+        TRIGGER_MAP.put(LevitationTrigger.KEY, new LevitationTriggerAdapter());
+        TRIGGER_MAP.put(ChangedDimensionTrigger.KEY, new ChangedDimensionTriggerAdapter());
+        TRIGGER_MAP.put(TickTrigger.KEY, new TickTriggerAdapter());
+        TRIGGER_MAP.put(TamedAnimalTrigger.KEY, new TamedAnimalTriggerAdapter());
+        TRIGGER_MAP.put(PlacedBlockTrigger.KEY, new PlacedBlockTriggerAdapter());
+        TRIGGER_MAP.put(ConsumeItemTrigger.KEY, new ConsumeItemTriggerAdapter());
+        TRIGGER_MAP.put(EffectsChangedTrigger.KEY, new EffectsChangedTriggerAdapter());
+        TRIGGER_MAP.put(UsedTotemTrigger.KEY, new UsedTotemTriggerAdapter());
+        TRIGGER_MAP.put(NetherTravelTrigger.KEY, new NetherTravelTriggerAdapter());
+        TRIGGER_MAP.put(FishingRodHookedTrigger.KEY, new FishingRodHookedTriggerAdapter());
+        TRIGGER_MAP.put(ChanneledLightningTrigger.KEY, new ChangedDimensionTriggerAdapter());
+        TRIGGER_MAP.put(ShotCrossbowTrigger.KEY, new ShotCrossbowTriggerAdapter());
+        TRIGGER_MAP.put(KilledByCrossbowTrigger.KEY, new KilledByCrossbowTriggerAdapter());
+        TRIGGER_MAP.put(HeroOfTheVillageTrigger.KEY, new HeroOfTheVillageTriggerAdapter());
+        TRIGGER_MAP.put(VoluntaryExileTrigger.KEY, new VoluntaryExileTriggerAdapter());
+        TRIGGER_MAP.put(SlideDownBlockTrigger.KEY, new SlideDownBlockTriggerAdapter());
+        TRIGGER_MAP.put(BeeNestDestroyedTrigger.KEY, new BeeNestDestroyedTriggerAdapter());
+        TRIGGER_MAP.put(TargetHitTrigger.KEY, new TargetHitTriggerAdapter());
+        TRIGGER_MAP.put(InteractBlockTrigger.KEY, new InteractBlockTriggerAdapter());
+        TRIGGER_MAP.put(GenerateLootTableTrigger.KEY, new GenerateLootTableTriggerAdapter());
+        TRIGGER_MAP.put(ThrownItemPickedUpTrigger.KEY, new ThrownItemPickedUpTriggerAdapter());
+        TRIGGER_MAP.put(PlayerInteractWithEntityTrigger.KEY, new PlayerInteractWithEntityTriggerAdapter());
+
+        for (TriggerAdapter<?> adapter : TRIGGER_MAP.values()) {
+            CraftAdvancementsManager.addHierarchyAdapter(adapter.getTriggerClass(), adapter);
+        }
+    }
+
+    public static void init() { }
+
+
+    private static final String TRIGGER = "trigger";
+    public static NamespacedKey getTrigerKey(JsonElement jsonElement) {
+        JsonObject jsonObject = ChatDeserializer.asJsonObject(jsonElement, "criteria");
+        return CraftNamespacedKey.fromString(ChatDeserializer.getString(jsonObject, TRIGGER));
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/CraftAdvancementsManager.java b/src/main/java/io/papermc/paper/advancements/CraftAdvancementsManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..8fcab9b49c801b591208cc7d80b7e672e72c0fb3
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/CraftAdvancementsManager.java
@@ -0,0 +1,113 @@
+package io.papermc.paper.advancements;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import io.papermc.paper.advancements.triggers.conditions.BlockCondition;
+import io.papermc.paper.advancements.triggers.conditions.BlockConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.DamageCondition;
+import io.papermc.paper.advancements.triggers.conditions.DamageConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.DamageSourceCondition;
+import io.papermc.paper.advancements.triggers.conditions.DamageTypeConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.DistanceCondition;
+import io.papermc.paper.advancements.triggers.conditions.DistanceConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EffectsCondition;
+import io.papermc.paper.advancements.triggers.conditions.EffectsCondition.EffectInfo;
+import io.papermc.paper.advancements.triggers.conditions.EffectsConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EffectsConditionAdapter.EffectInfoAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EnchantmentCondition;
+import io.papermc.paper.advancements.triggers.conditions.EnchantmentCondition.EnchantmentsCondition;
+import io.papermc.paper.advancements.triggers.conditions.EnchantmentConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EnchantmentConditionAdapter.EnchantmentsConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.EntityConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityConditionAdapter.EntityPredicatesConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityEquipmentCondition;
+import io.papermc.paper.advancements.triggers.conditions.EntityEquipmentConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityFlagsCondition;
+import io.papermc.paper.advancements.triggers.conditions.EntityFlagsConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityTypeCondition;
+import io.papermc.paper.advancements.triggers.conditions.EntityTypeConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.FishingHookCondition;
+import io.papermc.paper.advancements.triggers.conditions.FishingHookConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.FluidCondition;
+import io.papermc.paper.advancements.triggers.conditions.FluidConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition.ItemsCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.ItemConditionAdapter.ItemsConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.LightCondition;
+import io.papermc.paper.advancements.triggers.conditions.LightConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.LocationCondition;
+import io.papermc.paper.advancements.triggers.conditions.LocationConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.StateCondition;
+import io.papermc.paper.advancements.triggers.conditions.StateConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.FloatRange;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.IntegerRange;
+import io.papermc.paper.advancements.triggers.conditions.ValueConditionAdapter;
+import io.papermc.paper.advancements.triggers.conditions.ValueConditionAdapter.FloatRangeAdapter;
+import io.papermc.paper.advancements.triggers.conditions.ValueConditionAdapter.IntegerRangeAdapter;
+import io.papermc.paper.advancements.triggers.conditions.predicates.PredicateConditions;
+import org.bukkit.advancement.Advancement;
+import org.bukkit.craftbukkit.advancement.CraftAdvancement.AdvancementSerialization;
+import org.bukkit.craftbukkit.advancement.CraftAdvancement.CraftSerializedAdvancement;
+
+public class CraftAdvancementsManager implements AdvancementsManager {
+
+    private static final GsonBuilder GSON_BUILDER;
+    private static Gson ADVANCEMENTS_GSON;
+    static {
+        GSON_BUILDER = new GsonBuilder();
+        GSON_BUILDER.registerTypeAdapter(AdvancementDisplay.class, new AdvancementDisplayAdapter());
+        GSON_BUILDER.registerTypeAdapter(AdvancementRewards.class, new AdvancementRewardsAdapter());
+        GSON_BUILDER.registerTypeAdapter(CraftSerializedAdvancement.class, new AdvancementSerialization());
+        GSON_BUILDER.registerTypeAdapter(BlockCondition.class, new BlockConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(DamageCondition.class, new DamageConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(DamageSourceCondition.class, new DamageTypeConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(DistanceCondition.class, new DistanceConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(EffectsCondition.class, new EffectsConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(EffectInfo.class, new EffectInfoAdapter());
+        GSON_BUILDER.registerTypeAdapter(EnchantmentCondition.class, new EnchantmentConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(EnchantmentsCondition.class, new EnchantmentsConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(EntityCondition.class, new EntityConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(EntityPredicatesCondition.class, new EntityPredicatesConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(EntityEquipmentCondition.class, new EntityEquipmentConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(EntityFlagsCondition.class, new EntityFlagsConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(EntityTypeCondition.class, new EntityTypeConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(FishingHookCondition.class, new FishingHookConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(FluidCondition.class, new FluidConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(ItemCondition.class, new ItemConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(ItemsCondition.class, new ItemsConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(LightCondition.class, new LightConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(LocationCondition.class, new LocationConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(StateCondition.class, new StateConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(ValueCondition.class, new ValueConditionAdapter());
+        GSON_BUILDER.registerTypeAdapter(FloatRange.class, new FloatRangeAdapter());
+        GSON_BUILDER.registerTypeAdapter(IntegerRange.class, new IntegerRangeAdapter());
+
+        PredicateConditions.init();
+        AdvancementTriggers.init();
+    }
+
+    public static Gson getGson() {
+        if (ADVANCEMENTS_GSON == null) {
+            ADVANCEMENTS_GSON = GSON_BUILDER.create();
+        }
+        return ADVANCEMENTS_GSON;
+    }
+
+    public static void addHierarchyAdapter(Class<?> clazz, Object adapter) {
+        GSON_BUILDER.registerTypeHierarchyAdapter(clazz, adapter);
+    }
+
+    @Override
+    public Advancement createAdvancement(String key) {
+        return null;
+    }
+
+    @Override
+    public void reload() {
+
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/PlayerConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/PlayerConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..b4808a6e210736e8d222560359a2cc2880dc1513
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/PlayerConditionAdapter.java
@@ -0,0 +1,158 @@
+package io.papermc.paper.advancements;
+
+import com.google.common.base.Enums;
+import com.google.common.base.MoreObjects;
+import com.google.common.collect.Maps;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import io.papermc.paper.advancements.triggers.conditions.PlayerCondition;
+import io.papermc.paper.advancements.triggers.conditions.PlayerCondition.AdvancementCondition;
+import io.papermc.paper.advancements.triggers.conditions.PlayerCondition.AdvancementCriterionsCondition;
+import io.papermc.paper.advancements.triggers.conditions.PlayerCondition.AdvancementDoneCondition;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.IntegerRange;
+import io.papermc.paper.util.PaperChatDeserializer;
+import it.unimi.dsi.fastutil.objects.Object2BooleanMap;
+import it.unimi.dsi.fastutil.objects.Object2BooleanOpenHashMap;
+import net.minecraft.server.ChatDeserializer;
+import net.minecraft.server.CriterionConditionPlayer;
+import net.minecraft.server.IRegistry;
+import net.minecraft.server.MinecraftKey;
+import net.minecraft.server.StatisticWrapper;
+import org.bukkit.GameMode;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Statistic;
+import org.bukkit.craftbukkit.CraftStatistic;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+
+import java.lang.reflect.Type;
+import java.util.Iterator;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Map.Entry;
+
+public class PlayerConditionAdapter implements JsonDeserializer<PlayerCondition>, JsonSerializer<PlayerCondition> {
+
+    private static final String PLAYER = "player";
+    private static final String LEVEL = "level";
+    private static final String GAMEMODE = "gamemode";
+    private static final String STATS = "stats";
+    private static final String TYPE = "type";
+    private static final String STAT = "stat";
+    private static final String VALUE = "value";
+    private static final String RECIPES = "recipes";
+    private static final String ADVANCEMENTS = "advancements";
+
+    @Override
+    public PlayerCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject jsonObject = ChatDeserializer.asJsonObject(json, "player");
+        IntegerRange level = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(LEVEL), IntegerRange.class), IntegerRange.ANY);
+        GameMode gameMode = Enums.getIfPresent(GameMode.class, PaperChatDeserializer.getStringOrDefault(jsonObject, GAMEMODE, "").toUpperCase(Locale.ROOT)).orNull();
+        Map<Statistic, IntegerRange> statMap = Maps.newHashMap();
+        JsonArray jsonArray = PaperChatDeserializer.getJsonArrayOrDefault(jsonObject, STATS, null);
+        if (jsonArray != null) {
+            Iterator<JsonElement> iterator = jsonArray.iterator();
+            while (iterator.hasNext()) {
+                JsonObject statsObj = ChatDeserializer.asJsonObject(iterator.next(), "stats entry");
+                MinecraftKey minecraftKey = new MinecraftKey(ChatDeserializer.getString(jsonObject, TYPE));
+                StatisticWrapper<?> statisticWrapper = IRegistry.STATS.get(minecraftKey);
+                if (statisticWrapper == null) {
+                    throw new JsonParseException("Invalid stat type: " + minecraftKey);
+                }
+                MinecraftKey minecraftKey1 = new MinecraftKey(ChatDeserializer.getString(jsonObject, STAT));
+                Statistic statistic = CraftStatistic.getBukkitStatistic(CriterionConditionPlayer.getStat(statisticWrapper, minecraftKey));
+                IntegerRange value = MoreObjects.firstNonNull(context.deserialize(statsObj.get(VALUE), IntegerRange.class), IntegerRange.ANY);
+                statMap.put(statistic, value);
+            }
+        }
+
+        Object2BooleanMap<NamespacedKey> recipeMap = new Object2BooleanOpenHashMap<>();
+        JsonObject recipeObj = PaperChatDeserializer.getJsonObjectOrDefault(jsonObject, RECIPES, new JsonObject());
+        Iterator<Entry<String, JsonElement>> iterator = recipeObj.entrySet().iterator();
+        while (iterator.hasNext()) {
+            Entry<String, JsonElement> entry = iterator.next();
+            NamespacedKey key = CraftNamespacedKey.fromString(entry.getKey());
+            boolean isPresent = ChatDeserializer.asBoolean(entry.getValue(), "recipe present");
+            recipeMap.put(key, isPresent);
+        }
+
+        Map<NamespacedKey, AdvancementCondition> advancementMap = Maps.newHashMap();
+        JsonObject advancementObj = PaperChatDeserializer.getJsonObjectOrDefault(jsonObject, ADVANCEMENTS, new JsonObject());
+        iterator = advancementObj.entrySet().iterator();
+        while (iterator.hasNext()) {
+            Entry<String, JsonElement> entry = iterator.next();
+            NamespacedKey key = CraftNamespacedKey.fromString(entry.getKey());
+            advancementMap.put(key, context.deserialize(entry.getValue(), AdvancementCondition.class));
+        }
+        return new PlayerCondition(level, gameMode, statMap, recipeMap, advancementMap);
+    }
+
+    @Override
+    public JsonElement serialize(PlayerCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src == PlayerCondition.ANY) {
+            return JsonNull.INSTANCE;
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            jsonObject.add(LEVEL, context.serialize(src.getLevel()));
+            if (src.getGameMode() != null) {
+                jsonObject.addProperty(GAMEMODE, src.getGameMode().name().toLowerCase(Locale.ROOT));
+            }
+            if (!src.getStats().isEmpty()) {
+                JsonArray jsonArray = new JsonArray();
+                src.getStats().forEach((statistic, integerRange) -> {
+                    JsonObject statObj = new JsonObject();
+                    net.minecraft.server.Statistic<?> nmsStat = CraftStatistic.getNMSStatistic(statistic);
+                    statObj.addProperty(TYPE, IRegistry.STATS.getKey(nmsStat.getWrapper()).toString());
+                    statObj.addProperty(STAT, CriterionConditionPlayer.getKey(nmsStat).toString());
+                    statObj.add(VALUE, context.serialize(integerRange));
+                    jsonArray.add(statObj);
+                });
+                jsonObject.add(STATS, jsonArray);
+            }
+            if (!src.getRecipes().isEmpty()) {
+                JsonObject recipeObj = new JsonObject();
+                src.getRecipes().forEach((key, done) -> {
+                    recipeObj.addProperty(key.toString(), done);
+                });
+                jsonObject.add(RECIPES, recipeObj);
+            }
+            if (!src.getAdvancements().isEmpty()) {
+                JsonObject advancementsObj = new JsonObject();
+                src.getAdvancements().forEach((key, advancementCondition) -> {
+                    advancementsObj.add(key.toString(), advancementCondition.toJson());
+                });
+                jsonObject.add(ADVANCEMENTS, advancementsObj);
+            }
+            return jsonObject;
+        }
+    }
+
+    public static class AdvancementConditionAdapter implements JsonDeserializer<AdvancementCondition>, JsonSerializer<AdvancementCondition> {
+        @Override
+        public AdvancementCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+            if (json.isJsonPrimitive()) {
+                boolean done = json.getAsBoolean();
+                return new AdvancementDoneCondition(done);
+            } else {
+                Object2BooleanMap<String> criterionsMap = new Object2BooleanOpenHashMap<>();
+                JsonObject criterionObj = ChatDeserializer.asJsonObject(json, "criterion data");
+                criterionObj.entrySet().forEach(entry -> {
+                    boolean done = ChatDeserializer.asBoolean(entry.getValue(), "criterion test");
+                    criterionsMap.put(entry.getKey(), done);
+                });
+                return new AdvancementCriterionsCondition(criterionsMap);
+            }
+        }
+
+        @Override
+        public JsonElement serialize(AdvancementCondition src, Type typeOfSrc, JsonSerializationContext context) {
+            return src.toJson();
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/AbstractLocationTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/AbstractLocationTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..8f691159e172fe63fdae661422fec8f58c6d806f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/AbstractLocationTriggerAdapter.java
@@ -0,0 +1,87 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.AbstractLocationTrigger.HeroOfTheVillageTrigger;
+import io.papermc.paper.advancements.triggers.AbstractLocationTrigger.LocationTrigger;
+import io.papermc.paper.advancements.triggers.AbstractLocationTrigger.SleptInBedTrigger;
+import io.papermc.paper.advancements.triggers.AbstractLocationTrigger.VoluntaryExileTrigger;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.LocationCondition;
+import io.papermc.paper.util.PaperChatDeserializer;
+
+import java.lang.reflect.Type;
+import java.util.function.Function;
+
+public abstract class AbstractLocationTriggerAdapter<T extends AbstractLocationTrigger> extends PlayerTriggerAdapter<T> {
+
+    private static final String LOCATION = "location";
+
+    public AbstractLocationTriggerAdapter(Class<T> clazz) {
+        super(clazz);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(T trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(LOCATION, context.serialize(trigger.getLocation()));
+        return jsonObject;
+    }
+
+    protected T deserialize(JsonObject jsonObject, JsonDeserializationContext context, Function<LocationCondition, T> createFunction) {
+        JsonObject locationObj = PaperChatDeserializer.getJsonObjectOrDefault(jsonObject, LOCATION, jsonObject);
+        LocationCondition location = MoreObjects.firstNonNull(context.deserialize(locationObj, LocationCondition.class), LocationCondition.ANY);
+        return createFunction.apply(location);
+    }
+
+    public static class LocationTriggerAdapter extends AbstractLocationTriggerAdapter<LocationTrigger> {
+
+        public LocationTriggerAdapter() {
+            super(LocationTrigger.class);
+        }
+
+        @Override
+        public LocationTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+            return deserialize(jsonObject, context, locationCondition -> new LocationTrigger(player, locationCondition));
+        }
+    }
+
+    public static class SleptInBedTriggerAdapter extends AbstractLocationTriggerAdapter<SleptInBedTrigger> {
+
+        public SleptInBedTriggerAdapter() {
+            super(SleptInBedTrigger.class);
+        }
+
+        @Override
+        public SleptInBedTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+            return deserialize(jsonObject, context, locationCondition -> new SleptInBedTrigger(player, locationCondition));
+        }
+    }
+
+    public static class HeroOfTheVillageTriggerAdapter extends AbstractLocationTriggerAdapter<HeroOfTheVillageTrigger> {
+
+        public HeroOfTheVillageTriggerAdapter() {
+            super(HeroOfTheVillageTrigger.class);
+        }
+
+        @Override
+        public HeroOfTheVillageTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+            return deserialize(jsonObject, context, locationCondition -> new HeroOfTheVillageTrigger(player, locationCondition));
+        }
+    }
+
+    public static class VoluntaryExileTriggerAdapter extends AbstractLocationTriggerAdapter<VoluntaryExileTrigger> {
+
+        public VoluntaryExileTriggerAdapter() {
+            super(VoluntaryExileTrigger.class);
+        }
+
+        @Override
+        public VoluntaryExileTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+            return deserialize(jsonObject, context, locationCondition -> new VoluntaryExileTrigger(player, locationCondition));
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/BeeNestDestroyedTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/BeeNestDestroyedTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..573c684979ca22ae45dead424629203372bad429
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/BeeNestDestroyedTriggerAdapter.java
@@ -0,0 +1,56 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSyntaxException;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.IntegerRange;
+import net.minecraft.server.Block;
+import net.minecraft.server.ChatDeserializer;
+import net.minecraft.server.IRegistry;
+import net.minecraft.server.MinecraftKey;
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+
+import java.lang.reflect.Type;
+
+public class BeeNestDestroyedTriggerAdapter extends PlayerTriggerAdapter<BeeNestDestroyedTrigger> {
+
+    private static final String BLOCK = "block";
+    private static final String ITEM = "item";
+    private static final String NUM_OF_BEES = "num_bees_inside";
+
+    public BeeNestDestroyedTriggerAdapter() {
+        super(BeeNestDestroyedTrigger.class);
+    }
+
+    @Override
+    public BeeNestDestroyedTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        Material block = null;
+        if (jsonObject.has(BLOCK)) {
+            MinecraftKey minecraftkey = new MinecraftKey(ChatDeserializer.getString(jsonObject, "block"));
+
+            block = CraftMagicNumbers.getMaterial((Block) IRegistry.BLOCK.getOptional(minecraftkey).orElseThrow(() -> {
+                return new JsonSyntaxException("Unknown block type '" + minecraftkey + "'");
+            }));
+        }
+        ItemCondition item = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ITEM), ItemCondition.class), ItemCondition.ANY);
+        IntegerRange numOfBees = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(NUM_OF_BEES), IntegerRange.class), IntegerRange.ANY);
+        return new BeeNestDestroyedTrigger(player, block, item, numOfBees);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(BeeNestDestroyedTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        if (trigger.getBlock() != null) {
+            jsonObject.addProperty(BLOCK, trigger.getBlock().getKey().toString());
+        }
+        jsonObject.add(ITEM, context.serialize(trigger.getItem()));
+        jsonObject.add(NUM_OF_BEES, context.serialize(trigger.getNumOfBees()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/BredAnimalsTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/BredAnimalsTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..4148f0c4f4e1ac253c4a99f22bdf066a0f8f8b1e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/BredAnimalsTriggerAdapter.java
@@ -0,0 +1,38 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+
+import java.lang.reflect.Type;
+
+public class BredAnimalsTriggerAdapter extends PlayerTriggerAdapter<BredAnimalsTrigger> {
+
+    private static final String PARENT = "parent";
+    private static final String PARTNER = "partner";
+    private static final String CHILD = "child";
+
+    public BredAnimalsTriggerAdapter() {
+        super(BredAnimalsTrigger.class);
+    }
+
+    @Override
+    public BredAnimalsTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        EntityPredicatesCondition parent = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(PARENT), EntityPredicatesCondition.class), EntityPredicatesCondition.ANY);
+        EntityPredicatesCondition partner = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(PARTNER), EntityPredicatesCondition.class), EntityPredicatesCondition.ANY);
+        EntityPredicatesCondition child = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(CHILD), EntityPredicatesCondition.class), EntityPredicatesCondition.ANY);
+        return new BredAnimalsTrigger(player, parent, partner, child);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(BredAnimalsTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(PARENT, context.serialize(trigger.getParent()));
+        jsonObject.add(PARTNER, context.serialize(trigger.getPartner()));
+        jsonObject.add(CHILD, context.serialize(trigger.getChild()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/BrewedPotionTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/BrewedPotionTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..aaf9fed69e5e42e6863bc117e28f7841a7cf3fc3
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/BrewedPotionTriggerAdapter.java
@@ -0,0 +1,45 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.destroystokyo.paper.utils.PaperPluginLogger;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import net.minecraft.server.ChatDeserializer;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.potion.PotionEffectType;
+
+import java.lang.reflect.Type;
+
+public class BrewedPotionTriggerAdapter extends PlayerTriggerAdapter<BrewedPotionTrigger> {
+
+    private static final String POTION = "potion";
+
+    public BrewedPotionTriggerAdapter() {
+        super(BrewedPotionTrigger.class);
+    }
+
+    @Override
+    public BrewedPotionTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        PotionEffectType effectType = null;
+        if (jsonObject.has(POTION)) {
+            NamespacedKey key = CraftNamespacedKey.fromString(ChatDeserializer.getString(jsonObject, POTION));
+            effectType = PotionEffectType.getByKey(key);
+            if (effectType == null) {
+                PaperPluginLogger.getGlobal().warning("Did not recognize '" + key + "'");
+            }
+        }
+        return new BrewedPotionTrigger(player, effectType);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(BrewedPotionTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        if (trigger.getEffectType() != null) {
+            jsonObject.addProperty(POTION, trigger.getEffectType().getKey().toString());
+        }
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/ChangedDimensionTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/ChangedDimensionTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..871a61a39748212d2b1f9cea5d5c001ddbd3414e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/ChangedDimensionTriggerAdapter.java
@@ -0,0 +1,48 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.util.PaperChatDeserializer;
+import net.minecraft.server.ChatDeserializer;
+import net.minecraft.server.IRegistry;
+import net.minecraft.server.MinecraftKey;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.ResourceKey;
+import org.bukkit.Bukkit;
+import org.bukkit.NamespacedKey;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+
+import java.lang.reflect.Type;
+
+public class ChangedDimensionTriggerAdapter extends PlayerTriggerAdapter<ChangedDimensionTrigger> {
+
+    private static final String FROM = "from";
+    private static final String TO = "to";
+
+    public ChangedDimensionTriggerAdapter() {
+        super(ChangedDimensionTrigger.class);
+    }
+
+    @Override
+    public ChangedDimensionTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        NamespacedKey from = CraftNamespacedKey.fromStringOrNull(PaperChatDeserializer.getStringOrDefault(jsonObject, FROM, null));
+        NamespacedKey to = CraftNamespacedKey.fromStringOrNull(PaperChatDeserializer.getStringOrDefault(jsonObject, TO, null));
+        return new ChangedDimensionTrigger(player, from, to);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(ChangedDimensionTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        if (trigger.getFrom() != null) {
+            jsonObject.addProperty(FROM, trigger.getFrom().toString());
+        }
+        if (trigger.getTo() != null) {
+            jsonObject.addProperty(TO, trigger.getTo().toString());
+        }
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/ChanneledLightningTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/ChanneledLightningTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..a4400058b745ade2dcbc10a0bb750a5c83af5101
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/ChanneledLightningTriggerAdapter.java
@@ -0,0 +1,32 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+
+import java.lang.reflect.Type;
+
+public class ChanneledLightningTriggerAdapter extends PlayerTriggerAdapter<ChanneledLightningTrigger> {
+
+    private static final String VICTIMS = "victims";
+
+    public ChanneledLightningTriggerAdapter() {
+        super(ChanneledLightningTrigger.class);
+    }
+
+    @Override
+    public ChanneledLightningTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        EntityPredicatesCondition[] victims = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(VICTIMS), EntityPredicatesCondition[].class), EntityPredicatesCondition.ANY_ARRAY);
+        return new ChanneledLightningTrigger(player, victims);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(ChanneledLightningTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(VICTIMS, context.serialize(trigger.getVictims()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/ConstructBeaconTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/ConstructBeaconTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..fd5f01d670b2d495bdb991cf0316a22c9279d367
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/ConstructBeaconTriggerAdapter.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.IntegerRange;
+
+import java.lang.reflect.Type;
+
+public class ConstructBeaconTriggerAdapter extends PlayerTriggerAdapter<ConstructBeaconTrigger> {
+
+    private static final String LEVEL = "level";
+
+    public ConstructBeaconTriggerAdapter() {
+        super(ConstructBeaconTrigger.class);
+    }
+
+    @Override
+    public ConstructBeaconTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        IntegerRange level = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(LEVEL), IntegerRange.class), IntegerRange.ANY);
+        return new ConstructBeaconTrigger(player, level);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(ConstructBeaconTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(LEVEL, context.serialize(trigger.getLevel()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/ConsumeItemTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/ConsumeItemTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..df3d585998be1a2f9d31180e28b830b39aa8c6b8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/ConsumeItemTriggerAdapter.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition;
+
+import java.lang.reflect.Type;
+
+public class ConsumeItemTriggerAdapter extends PlayerTriggerAdapter<ConsumeItemTrigger> {
+
+    private static final String ITEM = "item";
+
+    public ConsumeItemTriggerAdapter() {
+        super(ConsumeItemTrigger.class);
+    }
+
+    @Override
+    public ConsumeItemTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        ItemCondition item = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ITEM), ItemCondition.class), ItemCondition.ANY);
+        return new ConsumeItemTrigger(player, item);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(ConsumeItemTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(ITEM, context.serialize(trigger.getItem()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/CuredZombieVillagerTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/CuredZombieVillagerTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..cc78eba65e4f29673debf2d0788576af39b7d617
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/CuredZombieVillagerTriggerAdapter.java
@@ -0,0 +1,35 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+
+import java.lang.reflect.Type;
+
+public class CuredZombieVillagerTriggerAdapter extends PlayerTriggerAdapter<CuredZombieVillagerTrigger> {
+
+    private static final String ZOMBIE = "zombie";
+    private static final String VILLAGER = "villager";
+
+    public CuredZombieVillagerTriggerAdapter() {
+        super(CuredZombieVillagerTrigger.class);
+    }
+
+    @Override
+    public CuredZombieVillagerTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        EntityPredicatesCondition zombie = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ZOMBIE), EntityPredicatesCondition.class), EntityPredicatesCondition.ANY);
+        EntityPredicatesCondition villager = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(VILLAGER), EntityPredicatesCondition.class), EntityPredicatesCondition.ANY);
+        return new CuredZombieVillagerTrigger(player, zombie, villager);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(CuredZombieVillagerTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(ZOMBIE, context.serialize(trigger.getZombie()));
+        jsonObject.add(VILLAGER, context.serialize(trigger.getVillager()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/EffectsChangedTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/EffectsChangedTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..2f863203d81b9e99190fbd3dbd5c62d1f60fab2e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/EffectsChangedTriggerAdapter.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EffectsCondition;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+
+import java.lang.reflect.Type;
+
+public class EffectsChangedTriggerAdapter extends PlayerTriggerAdapter<EffectsChangedTrigger> {
+
+    private static final String EFFECTS = "effects";
+
+    public EffectsChangedTriggerAdapter() {
+        super(EffectsChangedTrigger.class);
+    }
+
+    @Override
+    public EffectsChangedTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        EffectsCondition effects = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(EFFECTS), EffectsCondition.class), EffectsCondition.ANY);
+        return new EffectsChangedTrigger(player, effects);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(EffectsChangedTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(EFFECTS, context.serialize(trigger.getEffects()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/EnchantedItemTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/EnchantedItemTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..4d022b44338b2c555a834809e162e4fa7e240db8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/EnchantedItemTriggerAdapter.java
@@ -0,0 +1,37 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.IntegerRange;
+
+import java.lang.reflect.Type;
+
+public class EnchantedItemTriggerAdapter extends PlayerTriggerAdapter<EnchantedItemTrigger> {
+
+    private static final String ITEM = "item";
+    private static final String LEVELS = "levels";
+
+    public EnchantedItemTriggerAdapter() {
+        super(EnchantedItemTrigger.class);
+    }
+
+    @Override
+    public EnchantedItemTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        ItemCondition item = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ITEM), ItemCondition.class), ItemCondition.ANY);
+        IntegerRange levels = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(LEVELS), IntegerRange.class), IntegerRange.ANY);
+        return new EnchantedItemTrigger(player, item, levels);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(EnchantedItemTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(ITEM, context.serialize(trigger.getItem()));
+        jsonObject.add(LEVELS, context.serialize(trigger.getLevels()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/EnterBlockTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/EnterBlockTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..a3ec3de0d2bed8d3f655ff2151b125e30c59d2df
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/EnterBlockTriggerAdapter.java
@@ -0,0 +1,52 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSyntaxException;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.StateCondition;
+import net.minecraft.server.Block;
+import net.minecraft.server.ChatDeserializer;
+import net.minecraft.server.IRegistry;
+import net.minecraft.server.MinecraftKey;
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+
+import java.lang.reflect.Type;
+
+public class EnterBlockTriggerAdapter extends PlayerTriggerAdapter<EnterBlockTrigger> {
+
+    private static final String BLOCK = "block";
+    private static final String STATE = "state";
+
+    public EnterBlockTriggerAdapter() {
+        super(EnterBlockTrigger.class);
+    }
+
+    @Override
+    public EnterBlockTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        Material block = null;
+        if (jsonObject.has(BLOCK)) {
+            MinecraftKey minecraftkey = new MinecraftKey(ChatDeserializer.getString(jsonObject, "block"));
+
+            block = CraftMagicNumbers.getMaterial((Block) IRegistry.BLOCK.getOptional(minecraftkey).orElseThrow(() -> {
+                return new JsonSyntaxException("Unknown block type '" + minecraftkey + "'");
+            }));
+        }
+        StateCondition state = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(STATE), StateCondition.class), StateCondition.ANY);
+        return new EnterBlockTrigger(player, block, state);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(EnterBlockTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        if (trigger.getBlock() != null) {
+            jsonObject.addProperty(BLOCK, trigger.getBlock().getKey().toString());
+        }
+        jsonObject.add(STATE, context.serialize(trigger.getState()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/EntityHurtPlayerTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/EntityHurtPlayerTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..09464d7324d4c353c0416e56891cf3604debde4f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/EntityHurtPlayerTriggerAdapter.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.DamageCondition;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+
+import java.lang.reflect.Type;
+
+public class EntityHurtPlayerTriggerAdapter extends PlayerTriggerAdapter<EntityHurtPlayerTrigger> {
+
+    private static final String DAMAGE = "damage";
+
+    public EntityHurtPlayerTriggerAdapter() {
+        super(EntityHurtPlayerTrigger.class);
+    }
+
+    @Override
+    public EntityHurtPlayerTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        DamageCondition damage = MoreObjects.firstNonNull(context.deserialize(jsonObject, DamageCondition.class), DamageCondition.ANY);
+        return new EntityHurtPlayerTrigger(player, damage);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(EntityHurtPlayerTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(DAMAGE, context.serialize(trigger.getDamageCondition()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/FilledBucketTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/FilledBucketTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..d16ad870abdee31172b6a24b6c7b085c9fc6d847
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/FilledBucketTriggerAdapter.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition;
+
+import java.lang.reflect.Type;
+
+public class FilledBucketTriggerAdapter extends PlayerTriggerAdapter<FilledBucketTrigger> {
+
+    private static final String ITEM = "item";
+
+    public FilledBucketTriggerAdapter() {
+        super(FilledBucketTrigger.class);
+    }
+
+    @Override
+    public FilledBucketTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        ItemCondition item = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ITEM), ItemCondition.class), ItemCondition.ANY);
+        return new FilledBucketTrigger(player, item);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(FilledBucketTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(ITEM, context.serialize(trigger.getItem()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/FishingRodHookedTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/FishingRodHookedTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..e58ee2047322b33dc5d870a30caf9910c484c8e6
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/FishingRodHookedTriggerAdapter.java
@@ -0,0 +1,39 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition;
+
+import java.lang.reflect.Type;
+
+public class FishingRodHookedTriggerAdapter extends PlayerTriggerAdapter<FishingRodHookedTrigger> {
+
+    private static final String ENTITY = "entity";
+    private static final String ITEM = "item";
+    private static final String ROD = "rod";
+
+    public FishingRodHookedTriggerAdapter() {
+        super(FishingRodHookedTrigger.class);
+    }
+
+    @Override
+    public FishingRodHookedTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        ItemCondition rod = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ROD), ItemCondition.class), ItemCondition.ANY);
+        EntityPredicatesCondition entity = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ENTITY), EntityPredicatesCondition.class), EntityPredicatesCondition.ANY);
+        ItemCondition item = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ITEM), ItemCondition.class), ItemCondition.ANY);
+        return new FishingRodHookedTrigger(player, rod, entity, item);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(FishingRodHookedTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(ROD, context.serialize(trigger.getRod()));
+        jsonObject.add(ENTITY, context.serialize(trigger.getEntity()));
+        jsonObject.add(ITEM, context.serialize(trigger.getItem()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/GenerateLootTableTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/GenerateLootTableTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..fb61f1258d761a422ac654e8dacbb378d7a43a26
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/GenerateLootTableTriggerAdapter.java
@@ -0,0 +1,34 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import net.minecraft.server.ChatDeserializer;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+
+import java.lang.reflect.Type;
+
+public class GenerateLootTableTriggerAdapter extends PlayerTriggerAdapter<GenerateLootTableTrigger> {
+
+    private static final String LOOT_TABLE = "loot_table";
+
+    public GenerateLootTableTriggerAdapter() {
+        super(GenerateLootTableTrigger.class);
+    }
+
+    @Override
+    public GenerateLootTableTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        NamespacedKey loottable = CraftNamespacedKey.fromString(ChatDeserializer.getString(jsonObject, LOOT_TABLE));
+        return new GenerateLootTableTrigger(player, loottable);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(GenerateLootTableTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.addProperty(LOOT_TABLE, trigger.getLoottable().toString());
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/ImpossibleTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/ImpossibleTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..b428d9ce17ddd6a875af3c33c27ff6a884b90fef
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/ImpossibleTriggerAdapter.java
@@ -0,0 +1,26 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+
+import java.lang.reflect.Type;
+
+public class ImpossibleTriggerAdapter extends TriggerAdapter<io.papermc.paper.advancements.triggers.ImpossibleTrigger> {
+
+    public ImpossibleTriggerAdapter() {
+        super(ImpossibleTrigger.class);
+    }
+
+    @Override
+    public ImpossibleTrigger deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        return new ImpossibleTrigger();
+    }
+
+    @Override
+    public JsonElement serialize(ImpossibleTrigger src, Type typeOfSrc, JsonSerializationContext context) {
+        return new JsonObject();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/InteractBlockTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/InteractBlockTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..9ad7c47c85e3d3d065f77da1f21a339bf9106fc9
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/InteractBlockTriggerAdapter.java
@@ -0,0 +1,37 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition;
+import io.papermc.paper.advancements.triggers.conditions.LocationCondition;
+
+import java.lang.reflect.Type;
+
+public class InteractBlockTriggerAdapter extends PlayerTriggerAdapter<InteractBlockTrigger> {
+
+    private final static String LOCATION = "location";
+    private final static String ITEM = "item";
+
+    public InteractBlockTriggerAdapter() {
+        super(InteractBlockTrigger.class);
+    }
+
+    @Override
+    public InteractBlockTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        LocationCondition location = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(LOCATION), LocationCondition.class), LocationCondition.ANY);
+        ItemCondition item = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ITEM), ItemCondition.class), ItemCondition.ANY);
+        return new InteractBlockTrigger(player, location, item);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(InteractBlockTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(LOCATION, context.serialize(trigger.getLocation()));
+        jsonObject.add(ITEM, context.serialize(trigger.getItem()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/InventoryChangedTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/InventoryChangedTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..c4fbe7f43a8ed3848c004e6b3f2539821d378ac3
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/InventoryChangedTriggerAdapter.java
@@ -0,0 +1,59 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition.ItemsCondition;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.IntegerRange;
+import io.papermc.paper.util.PaperChatDeserializer;
+
+import java.lang.reflect.Type;
+
+public class InventoryChangedTriggerAdapter extends PlayerTriggerAdapter<InventoryChangedTrigger> {
+
+    private static final String ITEMS = "items";
+    private static final String SLOTS = "slots";
+    private static final String EMPTY = "empty";
+    private static final String OCCUPIED = "occupied";
+    private static final String FULL = "full";
+
+    public InventoryChangedTriggerAdapter() {
+        super(InventoryChangedTrigger.class);
+    }
+
+    @Override
+    public InventoryChangedTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        JsonObject slotsObj = PaperChatDeserializer.getJsonObjectOrDefault(jsonObject, SLOTS, new JsonObject());
+        IntegerRange occupied = MoreObjects.firstNonNull(context.deserialize(slotsObj.get(OCCUPIED), IntegerRange.class), IntegerRange.ANY);
+        IntegerRange full = MoreObjects.firstNonNull(context.deserialize(slotsObj.get(FULL), IntegerRange.class), IntegerRange.ANY);
+        IntegerRange empty = MoreObjects.firstNonNull(context.deserialize(slotsObj.get(EMPTY), IntegerRange.class), IntegerRange.ANY);
+        ItemsCondition items = MoreObjects.firstNonNull(context.deserialize(slotsObj.get(ITEMS), ItemsCondition.class), ItemsCondition.ANY);
+        return new InventoryChangedTrigger(player, occupied, full, empty, items);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(InventoryChangedTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        if (!trigger.getEmpty().isAnyRange() || !trigger.getFull().isAnyRange() || !trigger.getOccupied().isAnyRange()) {
+            JsonObject slots = new JsonObject();
+            slots.add(OCCUPIED, context.serialize(trigger.getOccupied()));
+            slots.add(FULL, context.serialize(trigger.getFull()));
+            slots.add(EMPTY, context.serialize(trigger.getEmpty()));
+            jsonObject.add(SLOTS, slots);
+        }
+
+        if (trigger.getItems().size() > 0) {
+            JsonArray items = new JsonArray();
+            for (ItemCondition item : trigger.getItems()) {
+                items.add(context.serialize(item));
+            }
+            jsonObject.add(ITEMS, items);
+        }
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/ItemDurabilityChangeTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/ItemDurabilityChangeTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..e2c5c7b2ad5546a401ee5eb871a3fd0131994bb8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/ItemDurabilityChangeTriggerAdapter.java
@@ -0,0 +1,40 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.IntegerRange;
+
+import java.lang.reflect.Type;
+
+public class ItemDurabilityChangeTriggerAdapter extends PlayerTriggerAdapter<ItemDurabilityChangeTrigger> {
+
+    private static final String DELTA = "delta";
+    private static final String DURABILITY = "durability";
+    private static final String ITEM = "item";
+
+    public ItemDurabilityChangeTriggerAdapter() {
+        super(ItemDurabilityChangeTrigger.class);
+    }
+
+    @Override
+    public ItemDurabilityChangeTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        ItemCondition item = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ITEM), ItemCondition.class), ItemCondition.ANY);
+        IntegerRange durability = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(DURABILITY), IntegerRange.class), IntegerRange.ANY);
+        IntegerRange delta = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(DELTA), IntegerRange.class), IntegerRange.ANY);
+        return new ItemDurabilityChangeTrigger(player, item, durability, delta);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(ItemDurabilityChangeTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(ITEM, context.serialize(trigger.getItem()));
+        jsonObject.add(DURABILITY, context.serialize(trigger.getDurability()));
+        jsonObject.add(DELTA, context.serialize(trigger.getDelta()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/KilledByCrossbowTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/KilledByCrossbowTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..993ae41d972430b1ab12b361ba9cbf5300be0325
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/KilledByCrossbowTriggerAdapter.java
@@ -0,0 +1,36 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.IntegerRange;
+
+import java.lang.reflect.Type;
+
+public class KilledByCrossbowTriggerAdapter extends PlayerTriggerAdapter<KilledByCrossbowTrigger> {
+
+    private static final String VICTIMS = "victims";
+    private static final String UNIQUE_ENTITY_TYPES = "unique_entity_types";
+
+    public KilledByCrossbowTriggerAdapter() {
+        super(KilledByCrossbowTrigger.class);
+    }
+
+    @Override
+    public KilledByCrossbowTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        EntityPredicatesCondition[] victims = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(VICTIMS), EntityPredicatesCondition[].class), EntityPredicatesCondition.ANY_ARRAY);
+        IntegerRange uniqueEntityTypes = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(UNIQUE_ENTITY_TYPES), IntegerRange.class), IntegerRange.ANY);
+        return new KilledByCrossbowTrigger(player, victims, uniqueEntityTypes);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(KilledByCrossbowTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(VICTIMS, context.serialize(trigger.getVictims()));
+        jsonObject.add(UNIQUE_ENTITY_TYPES, context.serialize(trigger.getUniqueEntityTypes()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/KilledTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/KilledTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..119f2145bc7bc694ccc460d08967ba1b702e2826
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/KilledTriggerAdapter.java
@@ -0,0 +1,62 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.KilledTrigger.EntityKilledPlayerTrigger;
+import io.papermc.paper.advancements.triggers.KilledTrigger.PlayerKilledEntityTrigger;
+import io.papermc.paper.advancements.triggers.conditions.DamageSourceCondition;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+
+import java.lang.reflect.Type;
+import java.util.function.BiFunction;
+
+public abstract class KilledTriggerAdapter<C extends KilledTrigger> extends PlayerTriggerAdapter<C> {
+
+    private static final String ENTITY = "entity";
+    private static final String KILLING_BLOW = "killing_blow";
+
+    protected KilledTriggerAdapter(Class<C> triggerClass) {
+        super(triggerClass);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(C trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(ENTITY, context.serialize(trigger.getEntityPredicates()));
+        jsonObject.add(KILLING_BLOW, context.serialize(trigger.getDamageSource()));
+        return jsonObject;
+    }
+
+    protected C deserialize(JsonObject jsonObject, JsonDeserializationContext context, BiFunction<EntityPredicatesCondition, DamageSourceCondition, C> createFunction) {
+        EntityPredicatesCondition entityPredicates = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ENTITY), EntityPredicatesCondition.class), EntityPredicatesCondition.ANY);
+        DamageSourceCondition damageSource = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(KILLING_BLOW), DamageSourceCondition.class), DamageSourceCondition.ANY);
+        return createFunction.apply(entityPredicates, damageSource);
+    }
+
+    public static class PlayerKilledEntityTriggerAdapter extends KilledTriggerAdapter<PlayerKilledEntityTrigger> {
+
+        public PlayerKilledEntityTriggerAdapter() {
+            super(PlayerKilledEntityTrigger.class);
+        }
+
+        @Override
+        public PlayerKilledEntityTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+            return deserialize(jsonObject, context, (entityPredicatesCondition, damageSourceCondition) -> new PlayerKilledEntityTrigger(player, entityPredicatesCondition, damageSourceCondition));
+        }
+    }
+
+    public static class EntityKilledPlayerTriggerAdapter extends KilledTriggerAdapter<EntityKilledPlayerTrigger> {
+
+        public EntityKilledPlayerTriggerAdapter() {
+            super(EntityKilledPlayerTrigger.class);
+        }
+
+        @Override
+        public EntityKilledPlayerTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+            return deserialize(jsonObject, context, (entityPredicatesCondition, damageSourceCondition) -> new EntityKilledPlayerTrigger(player, entityPredicatesCondition, damageSourceCondition));
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/LevitationTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/LevitationTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..7d9529040eda858d6af6bd9b772217c7fb2dc3a1
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/LevitationTriggerAdapter.java
@@ -0,0 +1,37 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.DistanceCondition;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.IntegerRange;
+
+import java.lang.reflect.Type;
+
+public class LevitationTriggerAdapter extends PlayerTriggerAdapter<LevitationTrigger> {
+
+    private static final String DISTANCE = "distance";
+    private static final String DURATION = "duration";
+
+    public LevitationTriggerAdapter() {
+        super(LevitationTrigger.class);
+    }
+
+    @Override
+    public LevitationTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        DistanceCondition distance = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(DISTANCE), DistanceCondition.class), DistanceCondition.ANY);
+        IntegerRange duration = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(DURATION), IntegerRange.class), IntegerRange.ANY);
+        return new LevitationTrigger(player, distance, duration);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(LevitationTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(DISTANCE, context.serialize(trigger.getDistance()));
+        jsonObject.add(DURATION, context.serialize(trigger.getDuration()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/NetherTravelTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/NetherTravelTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..bf5153db305e53117d8e8cd1e4f1415ad4c85268
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/NetherTravelTriggerAdapter.java
@@ -0,0 +1,40 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.DistanceCondition;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.LocationCondition;
+
+import java.lang.reflect.Type;
+
+public class NetherTravelTriggerAdapter extends PlayerTriggerAdapter<NetherTravelTrigger> {
+
+    private static final String DISTANCE = "distance";
+    private static final String ENTERED = "entered";
+    private static final String EXITED = "exited";
+
+    public NetherTravelTriggerAdapter() {
+        super(NetherTravelTrigger.class);
+    }
+
+    @Override
+    public NetherTravelTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        LocationCondition entered = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ENTERED), LocationCondition.class), LocationCondition.ANY);
+        LocationCondition exited = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(EXITED), LocationCondition.class), LocationCondition.ANY);
+        DistanceCondition distance = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(DISTANCE), DistanceCondition.class), DistanceCondition.ANY);
+        return new NetherTravelTrigger(player, entered, exited, distance);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(NetherTravelTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(ENTERED, context.serialize(trigger.getEntered()));
+        jsonObject.add(EXITED, context.serialize(trigger.getEntered()));
+        jsonObject.add(DISTANCE, context.serialize(trigger.getDistance()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/PlacedBlockTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/PlacedBlockTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..815ce8f2e4c8c1b76cee1cb2562b41c3d7d3821a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/PlacedBlockTriggerAdapter.java
@@ -0,0 +1,59 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSyntaxException;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition;
+import io.papermc.paper.advancements.triggers.conditions.LocationCondition;
+import io.papermc.paper.advancements.triggers.conditions.StateCondition;
+import net.minecraft.server.Block;
+import net.minecraft.server.ChatDeserializer;
+import net.minecraft.server.IRegistry;
+import net.minecraft.server.MinecraftKey;
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+
+import java.lang.reflect.Type;
+
+public class PlacedBlockTriggerAdapter extends PlayerTriggerAdapter<PlacedBlockTrigger> {
+
+    private static final String ITEM = "item";
+    private static final String STATE = "state";
+    private static final String BLOCK = "block";
+    private static final String LOCATION = "location";
+
+    public PlacedBlockTriggerAdapter() {
+        super(PlacedBlockTrigger.class);
+    }
+
+    @Override
+    public PlacedBlockTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        Material block = null;
+        if (jsonObject.has(BLOCK)) {
+            MinecraftKey minecraftkey = new MinecraftKey(ChatDeserializer.getString(jsonObject, BLOCK));
+            block = CraftMagicNumbers.getMaterial(IRegistry.BLOCK.getOptional(minecraftkey).orElseThrow(() -> {
+                return new JsonSyntaxException("Unknown block type '" + minecraftkey + "'");
+            }));
+        }
+        StateCondition state = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(STATE), StateCondition.class), StateCondition.ANY);
+        LocationCondition location = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(LOCATION), LocationCondition.class), LocationCondition.ANY);
+        ItemCondition item = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ITEM), ItemCondition.class), ItemCondition.ANY);
+        return new PlacedBlockTrigger(player, block, state, location, item);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(PlacedBlockTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        if (trigger.getBlock() != null) {
+            jsonObject.addProperty(BLOCK, trigger.getBlock().getKey().toString());
+        }
+        jsonObject.add(STATE, context.serialize(trigger.getState()));
+        jsonObject.add(LOCATION, context.serialize(trigger.getLocation()));
+        jsonObject.add(ITEM, context.serialize(trigger.getItem()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/PlayerHurtEntityTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/PlayerHurtEntityTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..00f1f50e1507a162c1f2822e3e4dfd1bb7ac2021
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/PlayerHurtEntityTriggerAdapter.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.DamageCondition;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+
+import java.lang.reflect.Type;
+
+public class PlayerHurtEntityTriggerAdapter extends PlayerTriggerAdapter<PlayerHurtEntityTrigger> {
+
+    private static final String DAMAGE = "damage";
+    private static final String ENTITY = "entity";
+
+    public PlayerHurtEntityTriggerAdapter() {
+        super(PlayerHurtEntityTrigger.class);
+    }
+
+    @Override
+    public PlayerHurtEntityTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        DamageCondition damage = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(DAMAGE), DamageCondition.class), DamageCondition.ANY);
+        EntityPredicatesCondition entityPredicates = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ENTITY), EntityPredicatesCondition.class), EntityPredicatesCondition.ANY);
+        return new PlayerHurtEntityTrigger(player, damage, entityPredicates);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(PlayerHurtEntityTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        return null;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/PlayerInteractWithEntityTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/PlayerInteractWithEntityTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..115965d45c607ff9f505257cef7cf332ddac8cc2
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/PlayerInteractWithEntityTriggerAdapter.java
@@ -0,0 +1,36 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition;
+
+import java.lang.reflect.Type;
+
+public class PlayerInteractWithEntityTriggerAdapter extends PlayerTriggerAdapter<PlayerInteractWithEntityTrigger> {
+
+    private static final String ITEM = "item";
+    private static final String ENTITY = "entity";
+
+    public PlayerInteractWithEntityTriggerAdapter() {
+        super(PlayerInteractWithEntityTrigger.class);
+    }
+
+    @Override
+    public PlayerInteractWithEntityTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        ItemCondition item = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ITEM), ItemCondition.class), ItemCondition.ANY);
+        EntityPredicatesCondition entity = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ENTITY), EntityPredicatesCondition.class), EntityPredicatesCondition.ANY);
+        return new PlayerInteractWithEntityTrigger(player, item, entity);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(PlayerInteractWithEntityTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(ITEM, context.serialize(trigger.getItem()));
+        jsonObject.add(ENTITY, context.serialize(trigger.getEntity()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/RecipeUnlockedTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/RecipeUnlockedTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..88be13e2400d5cd500dd120ffad8181d01780249
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/RecipeUnlockedTriggerAdapter.java
@@ -0,0 +1,34 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import net.minecraft.server.ChatDeserializer;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+
+import java.lang.reflect.Type;
+
+public class RecipeUnlockedTriggerAdapter extends PlayerTriggerAdapter<RecipeUnlockedTrigger> {
+
+    private static final String RECIPE = "recipe";
+
+    public RecipeUnlockedTriggerAdapter() {
+        super(RecipeUnlockedTrigger.class);
+    }
+
+    @Override
+    public RecipeUnlockedTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        NamespacedKey recipe = CraftNamespacedKey.fromString(ChatDeserializer.getString(jsonObject, RECIPE));
+        return new RecipeUnlockedTrigger(player, recipe);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(RecipeUnlockedTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.addProperty(RECIPE, trigger.getRecipe().toString());
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/ShotCrossbowTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/ShotCrossbowTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..656613ecd804088278e46f26c4e3e7b93a45064c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/ShotCrossbowTriggerAdapter.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition;
+
+import java.lang.reflect.Type;
+
+public class ShotCrossbowTriggerAdapter extends PlayerTriggerAdapter<ShotCrossbowTrigger> {
+
+    private static final String ITEM = "item";
+
+    public ShotCrossbowTriggerAdapter() {
+        super(ShotCrossbowTrigger.class);
+    }
+
+    @Override
+    public ShotCrossbowTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        ItemCondition item = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ITEM), ItemCondition.class), ItemCondition.ANY);
+        return new ShotCrossbowTrigger(player, item);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(ShotCrossbowTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(ITEM, context.serialize(trigger.getItem()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/SlideDownBlockTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/SlideDownBlockTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..d2c1a1cd07dfb5c9f4f5c83d4bc79cc15d080864
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/SlideDownBlockTriggerAdapter.java
@@ -0,0 +1,51 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSyntaxException;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.StateCondition;
+import net.minecraft.server.Block;
+import net.minecraft.server.ChatDeserializer;
+import net.minecraft.server.IRegistry;
+import net.minecraft.server.MinecraftKey;
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+
+import java.lang.reflect.Type;
+
+public class SlideDownBlockTriggerAdapter extends PlayerTriggerAdapter<SlideDownBlockTrigger> {
+
+    private static final String BLOCK = "block";
+    private static final String STATE = "state";
+
+    public SlideDownBlockTriggerAdapter() {
+        super(SlideDownBlockTrigger.class);
+    }
+
+    @Override
+    public SlideDownBlockTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        Material block = null;
+        if (jsonObject.has(BLOCK)) {
+            MinecraftKey minecraftkey = new MinecraftKey(ChatDeserializer.getString(jsonObject, BLOCK));
+            block = CraftMagicNumbers.getMaterial(IRegistry.BLOCK.getOptional(minecraftkey).orElseThrow(() -> {
+                return new JsonSyntaxException("Unknown block type '" + minecraftkey + "'");
+            }));
+        }
+        StateCondition state = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(STATE), StateCondition.class), StateCondition.ANY);
+        return new SlideDownBlockTrigger(player, block, state);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(SlideDownBlockTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        if (trigger.getBlock() != null) {
+            jsonObject.addProperty(BLOCK, trigger.getBlock().getKey().toString());
+        }
+        jsonObject.add(STATE, context.serialize(trigger.getState()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/SummonedEntityTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/SummonedEntityTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..aadb85877e21c713c959602a51054eb4f4086204
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/SummonedEntityTriggerAdapter.java
@@ -0,0 +1,32 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+
+import java.lang.reflect.Type;
+
+public class SummonedEntityTriggerAdapter extends PlayerTriggerAdapter<SummonedEntityTrigger> {
+
+    private static final String ENTITY = "entity";
+
+    public SummonedEntityTriggerAdapter() {
+        super(SummonedEntityTrigger.class);
+    }
+
+    @Override
+    public SummonedEntityTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        EntityPredicatesCondition entityPredicates = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ENTITY), EntityPredicatesCondition.class), EntityPredicatesCondition.ANY);
+        return new SummonedEntityTrigger(player, entityPredicates);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(SummonedEntityTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(ENTITY, context.serialize(trigger.getEntityPredicates()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/TamedAnimalTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/TamedAnimalTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..99f2f1a6fcf478e17faa7cc624af25b6a65fd552
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/TamedAnimalTriggerAdapter.java
@@ -0,0 +1,32 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+
+import java.lang.reflect.Type;
+
+public class TamedAnimalTriggerAdapter extends PlayerTriggerAdapter<TamedAnimalTrigger> {
+
+    private static final String ENTITY = "entity";
+
+    public TamedAnimalTriggerAdapter() {
+        super(TamedAnimalTrigger.class);
+    }
+
+    @Override
+    public TamedAnimalTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        EntityPredicatesCondition tamedEntity = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ENTITY), EntityPredicatesCondition.class), EntityPredicatesCondition.ANY);
+        return new TamedAnimalTrigger(player, tamedEntity);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(TamedAnimalTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(ENTITY, context.serialize(trigger.getTamedEntity()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/TargetHitTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/TargetHitTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..9fad879cd8bcb9766b9a4336589a27759aeb2c50
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/TargetHitTriggerAdapter.java
@@ -0,0 +1,36 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.IntegerRange;
+
+import java.lang.reflect.Type;
+
+public class TargetHitTriggerAdapter extends PlayerTriggerAdapter<TargetHitTrigger> {
+
+    private static final String SIGNAL_STRENGTH = "signal_strength";
+    private static final String PROJECTILE = "projectile";
+
+    public TargetHitTriggerAdapter() {
+        super(TargetHitTrigger.class);
+    }
+
+    @Override
+    public TargetHitTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        IntegerRange signalStrength = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(SIGNAL_STRENGTH), IntegerRange.class), IntegerRange.ANY);
+        EntityPredicatesCondition projectile = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(PROJECTILE), EntityPredicatesCondition.class), EntityPredicatesCondition.ANY);
+        return new TargetHitTrigger(player, signalStrength, projectile);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(TargetHitTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(SIGNAL_STRENGTH, context.serialize(trigger.getSignalStrength()));
+        jsonObject.add(PROJECTILE, context.serialize(trigger.getProjectile()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/ThrownItemPickedUpTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/ThrownItemPickedUpTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..3fe2b22e7f70b240d0aa25431c4e817ca6c3dbab
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/ThrownItemPickedUpTriggerAdapter.java
@@ -0,0 +1,36 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition;
+
+import java.lang.reflect.Type;
+
+public class ThrownItemPickedUpTriggerAdapter extends PlayerTriggerAdapter<ThrownItemPickedUpTrigger> {
+
+    private static final String ITEM = "item";
+    private static final String ENTITY = "entity";
+
+    public ThrownItemPickedUpTriggerAdapter() {
+        super(ThrownItemPickedUpTrigger.class);
+    }
+
+    @Override
+    public ThrownItemPickedUpTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        ItemCondition item = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ITEM), ItemCondition.class), ItemCondition.ANY);
+        EntityPredicatesCondition entity = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ENTITY), EntityPredicatesCondition.class), EntityPredicatesCondition.ANY);
+        return new ThrownItemPickedUpTrigger(player, item, entity);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(ThrownItemPickedUpTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(ITEM, context.serialize(trigger.getItem()));
+        jsonObject.add(ENTITY, context.serialize(trigger.getEntity()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/TickTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/TickTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..3a57f2f860122bae9703a97a4de4187d03266165
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/TickTriggerAdapter.java
@@ -0,0 +1,26 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+
+import java.lang.reflect.Type;
+
+public class TickTriggerAdapter extends PlayerTriggerAdapter<TickTrigger> {
+
+    public TickTriggerAdapter() {
+        super(TickTrigger.class);
+    }
+
+    @Override
+    public TickTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        return new TickTrigger(player);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(TickTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        return new JsonObject();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/TriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/TriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..10e124cd2b29f336147a0f062c7f8320f85e7018
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/TriggerAdapter.java
@@ -0,0 +1,54 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import io.papermc.paper.advancements.triggers.Trigger.PlayerTrigger;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import net.minecraft.server.ChatDeserializer;
+
+import java.lang.reflect.Type;
+
+public abstract class TriggerAdapter<T extends Trigger> implements JsonDeserializer<T>, JsonSerializer<T> {
+
+    private final Class<T> triggerClass;
+
+    protected TriggerAdapter(Class<T> triggerClass) {
+        this.triggerClass = triggerClass;
+    }
+
+    public Class<T> getTriggerClass() {
+        return triggerClass;
+    }
+
+    public abstract static class PlayerTriggerAdapter<T extends PlayerTrigger> extends TriggerAdapter<T> {
+
+        private static final String PLAYER = "player";
+
+        public PlayerTriggerAdapter(Class<T> clazz) {
+            super(clazz);
+        }
+
+        @Override
+        public T deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+            JsonObject jsonObject = ChatDeserializer.asJsonObject(json, "base advancement");
+            return deserializeTrigger(jsonObject, typeOfT, context, MoreObjects.firstNonNull(context.deserialize(jsonObject.get(PLAYER), EntityPredicatesCondition.class), EntityPredicatesCondition.ANY));
+        }
+
+        public abstract T deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player);
+
+        @Override
+        public JsonElement serialize(T src, Type typeOfSrc, JsonSerializationContext context) {
+            JsonObject jsonObject = serializeTrigger(src, typeOfSrc, context);
+            jsonObject.add(PLAYER, context.serialize(src.getPlayer()));
+            return jsonObject;
+        }
+
+        public abstract JsonObject serializeTrigger(T trigger, Type typeOfSrc, JsonSerializationContext context);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/UsedEnderEyeTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/UsedEnderEyeTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..9d81f96e7ed1eb0335cdb4437f8fdd6296461c60
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/UsedEnderEyeTriggerAdapter.java
@@ -0,0 +1,34 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.FloatRange;
+
+import java.lang.reflect.Type;
+
+public class UsedEnderEyeTriggerAdapter extends PlayerTriggerAdapter<UsedEnderEyeTrigger> {
+
+    private static final String DISTANCE = "distance";
+
+    public UsedEnderEyeTriggerAdapter() {
+        super(UsedEnderEyeTrigger.class);
+    }
+
+    @Override
+    public UsedEnderEyeTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        FloatRange distance = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(DISTANCE), FloatRange.class), FloatRange.ANY);
+        return new UsedEnderEyeTrigger(player, distance);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(UsedEnderEyeTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        // NOTE: MC doesn't seem to do this for just this specific trigger, idk what's up with that, maybe a MC bug
+        jsonObject.add(DISTANCE, context.serialize(trigger.getDistance()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/UsedTotemTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/UsedTotemTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..1975167f1af87ace8bdac311b94d467a99d5f8e9
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/UsedTotemTriggerAdapter.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition;
+
+import java.lang.reflect.Type;
+
+public class UsedTotemTriggerAdapter extends PlayerTriggerAdapter<UsedTotemTrigger> {
+
+    private static final String ITEM = "item";
+
+    public UsedTotemTriggerAdapter() {
+        super(UsedTotemTrigger.class);
+    }
+
+    @Override
+    public UsedTotemTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        ItemCondition item = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ITEM), ItemCondition.class), ItemCondition.ANY);
+        return new UsedTotemTrigger(player, item);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(UsedTotemTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(ITEM, context.serialize(trigger.getItem()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/VillagerTradeTriggerAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/VillagerTradeTriggerAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..c608cf88e39e94d1fa1b38bcf200995a1b8952e8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/VillagerTradeTriggerAdapter.java
@@ -0,0 +1,36 @@
+package io.papermc.paper.advancements.triggers;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.TriggerAdapter.PlayerTriggerAdapter;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition;
+
+import java.lang.reflect.Type;
+
+public class VillagerTradeTriggerAdapter extends PlayerTriggerAdapter<VillagerTradeTrigger> {
+
+    private static final String VILLAGER = "villager";
+    private static final String ITEM = "item";
+
+    public VillagerTradeTriggerAdapter() {
+        super(VillagerTradeTrigger.class);
+    }
+
+    @Override
+    public VillagerTradeTrigger deserializeTrigger(JsonObject jsonObject, Type typeOfT, JsonDeserializationContext context, EntityPredicatesCondition player) {
+        EntityPredicatesCondition villager = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(VILLAGER), EntityPredicatesCondition.class), EntityPredicatesCondition.ANY);
+        ItemCondition item = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ITEM), ItemCondition.class), ItemCondition.ANY);
+        return new VillagerTradeTrigger(player, villager, item);
+    }
+
+    @Override
+    public JsonObject serializeTrigger(VillagerTradeTrigger trigger, Type typeOfSrc, JsonSerializationContext context) {
+        JsonObject jsonObject = new JsonObject();
+        jsonObject.add(ITEM, context.serialize(trigger.getItem()));
+        jsonObject.add(VILLAGER, context.serialize(trigger.getVillager()));
+        return jsonObject;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/BlockConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/BlockConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..c6dac4511e703789e2a8c1de953b3bd051dbd10a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/BlockConditionAdapter.java
@@ -0,0 +1,49 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import net.minecraft.server.ChatDeserializer;
+import net.minecraft.server.MinecraftKey;
+import net.minecraft.server.TagsInstance;
+import org.bukkit.Material;
+import org.bukkit.Tag;
+import org.bukkit.craftbukkit.tag.CraftBlockTag;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+
+import java.lang.reflect.Type;
+
+public class BlockConditionAdapter implements JsonDeserializer<BlockCondition>, JsonSerializer<BlockCondition> {
+
+    private static final String BLOCK = "block";
+    private static final String TAG = "tag";
+    private static final String STATE = "state";
+
+    @Override
+    public BlockCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject obj = json.getAsJsonObject();
+        Material block = obj.has(BLOCK) ? CraftMagicNumbers.getMaterial(ChatDeserializer.getItem(obj, BLOCK)) : null;
+        Tag<Material> blockTag = obj.has(TAG) ? new CraftBlockTag(TagsInstance.a().getBlockTags(), new MinecraftKey(ChatDeserializer.getString(obj, TAG))) : null;
+        StateCondition state = MoreObjects.firstNonNull(context.deserialize(obj.get(STATE), StateCondition.class), StateCondition.ANY);
+        return new BlockConditionBuilder().setBlock(block).setBlockTag(blockTag).setState(state).createBlockCondition();
+    }
+
+    @Override
+    public JsonElement serialize(BlockCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src == BlockCondition.ANY) {
+            return JsonNull.INSTANCE;
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            if (src.getBlock() != null) jsonObject.addProperty(BLOCK, src.getBlock().getKey().toString());
+            if (src.getBlockTag() != null) jsonObject.addProperty(TAG, src.getBlockTag().getKey().toString());
+            jsonObject.add(STATE, context.serialize(src.getState()));
+            return jsonObject;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/DamageConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/DamageConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..ff4ad20aa6b3a5c87e6f78e6f7fe1586a67639f0
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/DamageConditionAdapter.java
@@ -0,0 +1,52 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.FloatRange;
+import net.minecraft.server.ChatDeserializer;
+
+import java.lang.reflect.Type;
+
+public class DamageConditionAdapter implements JsonDeserializer<DamageCondition>, JsonSerializer<DamageCondition> {
+
+    private final String BLOCKED = "blocked";
+    private final String DEALT = "dealt";
+    private final String SOURCE_ENTITY = "source_entity";
+    private final String TAKEN = "taken";
+    private final String TYPE = "type";
+
+    @Override
+    public DamageCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject jsonObject = ChatDeserializer.asJsonObject(json, "damage");
+        FloatRange dealtDamage = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(DEALT), FloatRange.class), FloatRange.ANY);
+        FloatRange takenDamage = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(TAKEN), FloatRange.class), FloatRange.ANY);
+        Boolean blocked = jsonObject.has(BLOCKED) ? ChatDeserializer.getBoolean(jsonObject, BLOCKED) : null;
+        EntityCondition source = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(SOURCE_ENTITY), EntityCondition.class), EntityCondition.ANY);
+        DamageSourceCondition damageType = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(TYPE), DamageSourceCondition.class), DamageSourceCondition.ANY);
+        return new DamageCondition(dealtDamage, takenDamage, source, blocked, damageType);
+    }
+
+    @Override
+    public JsonElement serialize(DamageCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src == DamageCondition.ANY) {
+            return JsonNull.INSTANCE;
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            jsonObject.add(DEALT, context.serialize(src.getDealtDamage()));
+            jsonObject.add(TAKEN, context.serialize(src.getTakenDamage()));
+            jsonObject.add(SOURCE_ENTITY, context.serialize(src.getEntity()));
+            jsonObject.add(TYPE, context.serialize(src.getDamageType()));
+            if (src.getBlocked() != null) {
+                jsonObject.addProperty(BLOCKED, src.getBlocked());
+            }
+            return jsonObject;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/DamageTypeConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/DamageTypeConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..8647fd55d1e5560ce8426b1dae7e593aad43b7cc
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/DamageTypeConditionAdapter.java
@@ -0,0 +1,68 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import net.minecraft.server.ChatDeserializer;
+
+import java.lang.reflect.Type;
+
+public class DamageTypeConditionAdapter implements JsonDeserializer<DamageSourceCondition>, JsonSerializer<DamageSourceCondition> {
+
+    private final String BYPASSES_ARMOR = "bypasses_armor";
+    private final String BYPASSES_INVULNERABILITY = "bypasses_invulnerability";
+    private final String BYPASSES_MAGIC = "bypasses_magic";
+    private final String IS_EXPLOSION = "is_explosion";
+    private final String IS_FIRE = "is_fire";
+    private final String IS_MAGIC = "is_magic";
+    private final String IS_PROJECTILE = "is_projectile";
+    private final String IS_LIGHTNING = "is_lightning";
+    private final String DIRECT_ENTITY = "direct_entity";
+    private final String SOURCE_ENTITY = "source_entity";
+
+    @Override
+    public DamageSourceCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject jsonObject = ChatDeserializer.asJsonObject(json, "damage flags");
+        Boolean bypassesArmor = getBooleanOrNull(jsonObject, BYPASSES_ARMOR);
+        Boolean bypassesInvulnerability = getBooleanOrNull(jsonObject, BYPASSES_INVULNERABILITY);
+        Boolean bypassesMagic = getBooleanOrNull(jsonObject, BYPASSES_MAGIC);
+        Boolean isExplosion = getBooleanOrNull(jsonObject, IS_EXPLOSION);
+        Boolean isFire = getBooleanOrNull(jsonObject, IS_FIRE);
+        Boolean isMagic = getBooleanOrNull(jsonObject, IS_MAGIC);
+        Boolean isProjectile = getBooleanOrNull(jsonObject, IS_PROJECTILE);
+        Boolean isLightning = getBooleanOrNull(jsonObject, IS_LIGHTNING);
+        EntityCondition direct = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(DIRECT_ENTITY), EntityCondition.class), EntityCondition.ANY);
+        EntityCondition source = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(SOURCE_ENTITY), EntityCondition.class), EntityCondition.ANY);
+        return new DamageSourceCondition(isProjectile, isExplosion, bypassesArmor, bypassesInvulnerability, bypassesMagic, isFire, isMagic, isLightning, direct, source);
+    }
+
+    private static Boolean getBooleanOrNull(JsonObject jsonObject, String key) {
+        return jsonObject.has(key) ? ChatDeserializer.getBoolean(jsonObject, key) : null;
+    }
+
+    @Override
+    public JsonElement serialize(DamageSourceCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src == DamageSourceCondition.ANY) {
+            return JsonNull.INSTANCE;
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            jsonObject.addProperty(IS_PROJECTILE, src.getProjectile());
+            jsonObject.addProperty(IS_EXPLOSION, src.getExplosion());
+            jsonObject.addProperty(BYPASSES_ARMOR, src.getBypassesArmor());
+            jsonObject.addProperty(BYPASSES_INVULNERABILITY, src.getBypassesInvulnerability());
+            jsonObject.addProperty(BYPASSES_MAGIC, src.getBypassesMagic());
+            jsonObject.addProperty(IS_FIRE, src.getFire());
+            jsonObject.addProperty(IS_MAGIC, src.getMagic());
+            jsonObject.addProperty(IS_LIGHTNING, src.getLightning());
+            jsonObject.add(DIRECT_ENTITY, context.serialize(src.getDirect()));
+            jsonObject.add(SOURCE_ENTITY, context.serialize(src.getSource()));
+            return jsonObject;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/DistanceConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/DistanceConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..d7726576858986049873c1a9a26f23a9ec5b364f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/DistanceConditionAdapter.java
@@ -0,0 +1,50 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.FloatRange;
+
+import java.lang.reflect.Type;
+
+public class DistanceConditionAdapter implements JsonDeserializer<DistanceCondition>, JsonSerializer<DistanceCondition> {
+
+    private static final String X = "x";
+    private static final String Y = "y";
+    private static final String Z = "z";
+    private static final String ABSOLUTE = "absolute";
+    private static final String HORIZONTAL = "horizontal";
+
+    @Override
+    public DistanceCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject jsonObject = json.getAsJsonObject();
+        return new DistanceCondition(
+            MoreObjects.firstNonNull(context.deserialize(jsonObject.get(X), FloatRange.class), FloatRange.ANY),
+            MoreObjects.firstNonNull(context.deserialize(jsonObject.get(Y), FloatRange.class), FloatRange.ANY),
+            MoreObjects.firstNonNull(context.deserialize(jsonObject.get(Z), FloatRange.class), FloatRange.ANY),
+            MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ABSOLUTE), FloatRange.class), FloatRange.ANY),
+            MoreObjects.firstNonNull(context.deserialize(jsonObject.get(HORIZONTAL), FloatRange.class), FloatRange.ANY)
+        );
+    }
+
+    @Override
+    public JsonElement serialize(DistanceCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src == DistanceCondition.ANY) {
+            return JsonNull.INSTANCE;
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            jsonObject.add(X, context.serialize(src.getXRange()));
+            jsonObject.add(Y, context.serialize(src.getYRange()));
+            jsonObject.add(Z, context.serialize(src.getZRange()));
+            jsonObject.add(ABSOLUTE, context.serialize(src.getAbsoluteRange()));
+            jsonObject.add(HORIZONTAL, context.serialize(src.getHorizontalRange()));
+            return jsonObject;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/EffectsConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/EffectsConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..7be1a19e8f6ba8d486e5aa31370be27c80f7e44b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/EffectsConditionAdapter.java
@@ -0,0 +1,86 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.common.base.MoreObjects;
+import com.google.common.collect.Maps;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import com.google.gson.JsonSyntaxException;
+import io.papermc.paper.advancements.triggers.conditions.EffectsCondition.EffectInfo;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.IntegerRange;
+import io.papermc.paper.util.PaperChatDeserializer;
+import net.minecraft.server.ChatDeserializer;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.potion.PotionEffectType;
+
+import java.lang.reflect.Type;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+
+public class EffectsConditionAdapter implements JsonDeserializer<EffectsCondition>, JsonSerializer<EffectsCondition> {
+    @Override
+    public EffectsCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject jsonObject = json.getAsJsonObject();
+        Map<PotionEffectType, EffectInfo> effectInfoMap = Maps.newLinkedHashMap();
+        Iterator<Entry<String, JsonElement>> iterator = jsonObject.entrySet().iterator();
+        while (iterator.hasNext()) {
+            Entry<String, JsonElement> entry = iterator.next();
+            PotionEffectType type = PotionEffectType.getByKey(CraftNamespacedKey.fromStringOrNull(entry.getKey()));
+            if (type == null) {
+                throw new JsonSyntaxException("Unknown effect '" + entry.getKey() + "'");
+            }
+            EffectInfo effectInfo = context.deserialize(ChatDeserializer.asJsonObject(entry.getValue(), entry.getKey()), EffectInfo.class);
+            effectInfoMap.put(type, effectInfo);
+        }
+        return new EffectsCondition(effectInfoMap);
+    }
+
+    @Override
+    public JsonElement serialize(EffectsCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src == EffectsCondition.ANY) {
+            return JsonNull.INSTANCE;
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            Iterator<Entry<PotionEffectType, EffectInfo>> iterator = src.getEffectInfoMap().entrySet().iterator();
+            while (iterator.hasNext()) {
+                Entry<PotionEffectType, EffectInfo> entry = iterator.next();
+                jsonObject.add(entry.getKey().getKey().toString(), context.serialize(entry.getValue()));
+            }
+            return jsonObject;
+        }
+    }
+
+    public static class EffectInfoAdapter implements JsonDeserializer<EffectInfo>, JsonSerializer<EffectInfo> {
+
+        private static final String AMPLIFIER = "amplifier";
+        private static final String DURATION = "duration";
+        private static final String AMBIENT = "ambient";
+        private static final String VISIBLE = "visible";
+
+        @Override
+        public EffectInfo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+            JsonObject jsonObject = json.getAsJsonObject();
+            IntegerRange amplifier = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(AMPLIFIER), IntegerRange.class), IntegerRange.ANY);
+            IntegerRange duration = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(DURATION), IntegerRange.class), IntegerRange.ANY);
+            Boolean ambient = PaperChatDeserializer.getBooleanOrDefault(jsonObject, AMBIENT, null);
+            Boolean visible = PaperChatDeserializer.getBooleanOrDefault(jsonObject, VISIBLE, null);
+            return new EffectInfo(amplifier, duration, ambient, visible);
+        }
+
+        @Override
+        public JsonElement serialize(EffectInfo src, Type typeOfSrc, JsonSerializationContext context) {
+            JsonObject jsonObject = new JsonObject();
+            jsonObject.add(AMPLIFIER, context.serialize(src.getAmplifer()));
+            jsonObject.add(DURATION, context.serialize(src.getDuration()));
+            jsonObject.addProperty(AMBIENT, src.getAmbient());
+            jsonObject.addProperty(VISIBLE, src.getVisible());
+            return jsonObject;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/EnchantmentConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/EnchantmentConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..c589bdef498419d0e0992806652a5fd63be64592
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/EnchantmentConditionAdapter.java
@@ -0,0 +1,76 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import io.papermc.paper.advancements.triggers.conditions.EnchantmentCondition.EnchantmentsCondition;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.IntegerRange;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.enchantments.Enchantment;
+
+import java.lang.reflect.Type;
+import java.util.HashSet;
+import java.util.Set;
+
+public class EnchantmentConditionAdapter implements JsonDeserializer<EnchantmentCondition>, JsonSerializer<EnchantmentCondition> {
+
+    private static final String ENCHANTMENT = "enchantment";
+    private static final String LEVELS = "levels";
+
+    @Override
+    public EnchantmentCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject jsonObject = json.getAsJsonObject();
+        Enchantment enchantment = null;
+        if (jsonObject.has(ENCHANTMENT)) {
+            enchantment = Enchantment.getByKey(CraftNamespacedKey.fromStringOrNull(jsonObject.get(ENCHANTMENT).getAsString()));
+        }
+        IntegerRange range = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(LEVELS), IntegerRange.class), IntegerRange.ANY);
+        return new EnchantmentCondition(enchantment, range);
+    }
+
+    @Override
+    public JsonElement serialize(EnchantmentCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src == EnchantmentCondition.ANY) {
+            return JsonNull.INSTANCE;
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            if (src.getEnchantment() != null) {
+                jsonObject.addProperty(ENCHANTMENT, src.getEnchantment().getKey().toString());
+            }
+            jsonObject.add(LEVELS, context.serialize(src.getLevelRange()));
+            return jsonObject;
+        }
+    }
+
+    public static class EnchantmentsConditionAdapter implements JsonDeserializer<EnchantmentsCondition>, JsonSerializer<EnchantmentsCondition> {
+        @Override
+        public EnchantmentsCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+            Set<EnchantmentCondition> enchantments = new HashSet<>();
+            JsonArray jsonArray = json.getAsJsonArray();
+            for (JsonElement element : jsonArray) {
+                 enchantments.add(context.deserialize(element, EnchantmentCondition.class));
+            }
+            return new EnchantmentsCondition(enchantments);
+        }
+
+        @Override
+        public JsonElement serialize(EnchantmentsCondition src, Type typeOfSrc, JsonSerializationContext context) {
+            if (src == EnchantmentsCondition.ANY) {
+                return JsonNull.INSTANCE;
+            } else {
+                JsonArray jsonArray = new JsonArray();
+                for (EnchantmentCondition enchantment : src) {
+                    jsonArray.add(context.serialize(enchantment));
+                }
+                return jsonArray;
+            }
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/EntityConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/EntityConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..d61cceae6832848ea421853ea3b918265c71ea67
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/EntityConditionAdapter.java
@@ -0,0 +1,111 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition.EntityPredicatesCondition;
+import io.papermc.paper.advancements.triggers.conditions.predicates.EntityPropertyPredicateCondition;
+import io.papermc.paper.advancements.triggers.conditions.predicates.EntityTarget;
+import io.papermc.paper.advancements.triggers.conditions.predicates.PredicateCondition;
+import net.minecraft.server.ChatDeserializer;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+
+import java.lang.reflect.Type;
+
+public class EntityConditionAdapter implements JsonDeserializer<EntityCondition>, JsonSerializer<EntityCondition> {
+
+    private static final String TYPE = "type";
+    private static final String DISTANCE = "distance";
+    private static final String LOCATION = "location";
+    private static final String EFFECTS = "effects";
+    private static final String FLAGS = "flags";
+    private static final String EQUIPMENT = "equipment";
+    private static final String PLAYER = "player";
+    private static final String FISHING_HOOK = "fishing_hook";
+    private static final String VEHICLE = "vehicle";
+    private static final String TARGETED_ENTITY = "targeted_entity";
+    private static final String TEAM = "team";
+    private static final String CAT_TYPE = "catType";
+
+    @Override
+    public EntityCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject jsonObject = ChatDeserializer.asJsonObject(json, "entity");
+        EntityTypeCondition entityType = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(TYPE), EntityTypeCondition.class), EntityTypeCondition.ANY);
+        DistanceCondition distance = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(DISTANCE), DistanceCondition.class), DistanceCondition.ANY);
+        LocationCondition location = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(LOCATION), LocationCondition.class), LocationCondition.ANY);
+        EffectsCondition effects = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(EFFECTS), EffectsCondition.class), EffectsCondition.ANY);
+        EntityFlagsCondition flags = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(FLAGS), EntityFlagsCondition.class), EntityFlagsCondition.ANY);
+        EntityEquipmentCondition equipment = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(EQUIPMENT), EntityEquipmentCondition.class), EntityEquipmentCondition.ANY);
+        PlayerCondition player = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(PLAYER), PlayerCondition.class), PlayerCondition.ANY);
+        FishingHookCondition fishingHook = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(FISHING_HOOK), FishingHookCondition.class), FishingHookCondition.ANY);
+        EntityCondition vehicle = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(VEHICLE), EntityCondition.class), EntityCondition.ANY);
+        EntityCondition target = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(TARGETED_ENTITY), EntityCondition.class), EntityCondition.ANY);
+        String team = io.papermc.paper.util.PaperChatDeserializer.getStringOrDefault(jsonObject, TEAM, null);
+        NamespacedKey catType = jsonObject.has(CAT_TYPE) ? CraftNamespacedKey.fromString(ChatDeserializer.getString(jsonObject, CAT_TYPE)) : null;
+        return new EntityCondition(entityType, distance, location, effects, flags, equipment, player, fishingHook, vehicle, target, team, catType);
+    }
+
+    @Override
+    public JsonElement serialize(EntityCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src == EntityCondition.ANY) {
+            return JsonNull.INSTANCE;
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            jsonObject.add(TYPE, context.serialize(src.getEntityType()));
+            jsonObject.add(DISTANCE, context.serialize(src.getDistanceToPlayer()));
+            jsonObject.add(LOCATION, context.serialize(src.getLocation()));
+            jsonObject.add(EFFECTS, context.serialize(src.getEffects()));
+            jsonObject.add(FLAGS, context.serialize(src.getFlags()));
+            jsonObject.add(EQUIPMENT, context.serialize(src.getEquipment()));
+            jsonObject.add(PLAYER, context.serialize(src.getPlayer()));
+            jsonObject.add(FISHING_HOOK, context.serialize(src.getFishingHook()));
+            jsonObject.add(VEHICLE, context.serialize(src.getVehicle()));
+            jsonObject.add(TARGETED_ENTITY, context.serialize(src.getTarget()));
+            jsonObject.addProperty(TEAM, src.getTeam());
+            if (src.getCatType() != null) {
+                jsonObject.addProperty(CAT_TYPE, src.getCatType().toString());
+            }
+            return jsonObject;
+        }
+    }
+
+    public static class EntityPredicatesConditionAdapter implements JsonDeserializer<EntityPredicatesCondition>, JsonSerializer<EntityPredicatesCondition> {
+
+        @Override
+        public EntityPredicatesCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+            if (json.isJsonArray()) {
+                PredicateCondition[] predicates = context.deserialize(json, PredicateCondition[].class);
+                return new EntityPredicatesCondition(predicates);
+            } else {
+                EntityCondition entity = context.deserialize(json, EntityCondition.class);
+                PredicateCondition[] predicateConditions;
+                if (entity != null) {
+                    return new EntityPredicatesCondition(new PredicateCondition[] { new EntityPropertyPredicateCondition(entity, EntityTarget.THIS) });
+                } else {
+                    return EntityPredicatesCondition.ANY;
+                }
+            }
+        }
+
+        @Override
+        public JsonElement serialize(EntityPredicatesCondition src, Type typeOfSrc, JsonSerializationContext context) {
+            if (src.getPredicates().length == 0) {
+                return JsonNull.INSTANCE;
+            } else {
+                JsonArray predicatesArray = new JsonArray();
+                for (PredicateCondition predicate : src.getPredicates()) {
+                    predicatesArray.add(context.serialize(predicate));
+                }
+                return predicatesArray;
+            }
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/EntityEquipmentConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/EntityEquipmentConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..5de14246b8b617b5cea2e7839bd8868dff23e142
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/EntityEquipmentConditionAdapter.java
@@ -0,0 +1,51 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+
+import java.lang.reflect.Type;
+
+public class EntityEquipmentConditionAdapter implements JsonDeserializer<EntityEquipmentCondition>, JsonSerializer<EntityEquipmentCondition> {
+
+    private static final String MAIN = "mainhand";
+    private static final String OFF = "offhand";
+    private static final String HEAD = "head";
+    private static final String CHEST = "chest";
+    private static final String LEGS = "legs";
+    private static final String FEET = "feet";
+
+    @Override
+    public EntityEquipmentCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject jsonObject = json.getAsJsonObject();
+        ItemCondition head = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(HEAD), ItemCondition.class), ItemCondition.ANY);
+        ItemCondition chest = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(CHEST), ItemCondition.class), ItemCondition.ANY);
+        ItemCondition legs = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(LEGS), ItemCondition.class), ItemCondition.ANY);
+        ItemCondition feet = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(FEET), ItemCondition.class), ItemCondition.ANY);
+        ItemCondition mainHand = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(MAIN), ItemCondition.class), ItemCondition.ANY);
+        ItemCondition offHand = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(OFF), ItemCondition.class), ItemCondition.ANY);
+        return new EntityEquipmentCondition(head, chest, legs, feet, mainHand, offHand);
+    }
+
+    @Override
+    public JsonElement serialize(EntityEquipmentCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src == EntityEquipmentCondition.ANY) {
+            return JsonNull.INSTANCE;
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            jsonObject.add(HEAD, context.serialize(src.getHeadItem()));
+            jsonObject.add(CHEST, context.serialize(src.getChestItem()));
+            jsonObject.add(LEGS, context.serialize(src.getLegsItem()));
+            jsonObject.add(FEET, context.serialize(src.getFeetItem()));
+            jsonObject.add(MAIN, context.serialize(src.getMainHand()));
+            jsonObject.add(OFF, context.serialize(src.getOffHand()));
+            return jsonObject;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/EntityFlagsConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/EntityFlagsConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..298103a54bf1a65ffec3640ac20b70d05fcb73c7
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/EntityFlagsConditionAdapter.java
@@ -0,0 +1,52 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import net.minecraft.server.ChatDeserializer;
+
+import java.lang.reflect.Type;
+
+public class EntityFlagsConditionAdapter implements JsonDeserializer<EntityFlagsCondition>, JsonSerializer<EntityFlagsCondition> {
+
+    private final String IS_ON_FIRE = "is_on_fire";
+    private final String IS_SNEAKING = "is_sneaking";
+    private final String IS_SPRINTING = "is_sprinting";
+    private final String IS_SWIMMING = "is_swimming";
+    private final String IS_BABY = "is_baby";
+
+    @Override
+    public EntityFlagsCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject jsonObject = json.getAsJsonObject();
+        Boolean isOnFire = getBooleanOrNull(jsonObject, IS_ON_FIRE);
+        Boolean isSneaking = getBooleanOrNull(jsonObject, IS_SNEAKING);
+        Boolean isSprinting = getBooleanOrNull(jsonObject, IS_SPRINTING);
+        Boolean isSwimming = getBooleanOrNull(jsonObject, IS_SWIMMING);
+        Boolean isBaby = getBooleanOrNull(jsonObject, IS_BABY);
+        return new EntityFlagsCondition(isOnFire, isSneaking, isSprinting, isSwimming, isBaby);
+    }
+
+    private static Boolean getBooleanOrNull(JsonObject jsonObject, String key) {
+        return jsonObject.has(key) ? ChatDeserializer.getBoolean(jsonObject, key) : null;
+    }
+
+    @Override
+    public JsonElement serialize(EntityFlagsCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src == EntityFlagsCondition.ANY) {
+            return JsonNull.INSTANCE;
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            jsonObject.addProperty(IS_ON_FIRE, src.getOnFire());
+            jsonObject.addProperty(IS_SNEAKING, src.getSneaking());
+            jsonObject.addProperty(IS_SPRINTING, src.getSprinting());
+            jsonObject.addProperty(IS_SWIMMING, src.getSwimming());
+            jsonObject.addProperty(IS_BABY, src.getBaby());
+            return jsonObject;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/EntityTypeConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/EntityTypeConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..d875eef24e9c22c62e20014def54dbf46b017ba1
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/EntityTypeConditionAdapter.java
@@ -0,0 +1,40 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import com.google.gson.JsonSyntaxException;
+import io.papermc.paper.advancements.triggers.conditions.EntityTypeCondition.EntityTypeTagCondition;
+import io.papermc.paper.advancements.triggers.conditions.EntityTypeCondition.EntityTypeTypeCondition;
+import io.papermc.paper.tag.CraftEntityTag;
+import net.minecraft.server.MinecraftKey;
+import net.minecraft.server.TagsInstance;
+import org.bukkit.craftbukkit.tag.CraftTag;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.entity.EntityType;
+
+import java.lang.reflect.Type;
+
+public class EntityTypeConditionAdapter implements JsonDeserializer<EntityTypeCondition>, JsonSerializer<EntityTypeCondition> {
+    @Override
+    public EntityTypeCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        String value = json.getAsString();
+        if (value.startsWith("#")) {
+            return new EntityTypeTagCondition(new CraftEntityTag(TagsInstance.a().getEntityTags(), new MinecraftKey(value.substring(1))));
+        } else {
+            EntityType type = EntityType.getByKey(CraftNamespacedKey.fromStringOrNull(value));
+            if (type == null) {
+                throw new JsonSyntaxException("Unknown entity type '" + value + "'");
+            }
+            return new EntityTypeTypeCondition(type);
+        }
+    }
+
+    @Override
+    public JsonElement serialize(EntityTypeCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        return null;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/FishingHookConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/FishingHookConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..0a9a4651435593802fec87c319cb3c2896c92ead
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/FishingHookConditionAdapter.java
@@ -0,0 +1,37 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonPrimitive;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import net.minecraft.server.ChatDeserializer;
+
+import java.lang.reflect.Type;
+
+public class FishingHookConditionAdapter implements JsonDeserializer<FishingHookCondition>, JsonSerializer<FishingHookCondition> {
+
+    private static final String IN_OPEN_WATER = "in_open_water";
+
+    @Override
+    public FishingHookCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject jsonObject = ChatDeserializer.asJsonObject(json, "fishing hook");
+        JsonElement inOpenWaterElement = jsonObject.get(IN_OPEN_WATER);
+        return inOpenWaterElement != null ? new FishingHookCondition(ChatDeserializer.asBoolean(inOpenWaterElement, IN_OPEN_WATER)) : FishingHookCondition.ANY;
+    }
+
+    @Override
+    public JsonElement serialize(FishingHookCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src == FishingHookCondition.ANY) {
+            return JsonNull.INSTANCE;
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            jsonObject.add(IN_OPEN_WATER, new JsonPrimitive(src.isInOpenWater()));
+            return jsonObject;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/FluidConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/FluidConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..61f588c010588914258c8579e712621c04979c3e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/FluidConditionAdapter.java
@@ -0,0 +1,62 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import net.minecraft.server.ChatDeserializer;
+import net.minecraft.server.IRegistry;
+import net.minecraft.server.MinecraftKey;
+import net.minecraft.server.TagsInstance;
+import org.bukkit.Fluid;
+import org.bukkit.Tag;
+import org.bukkit.craftbukkit.tag.CraftFluidTag;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+
+import java.lang.reflect.Type;
+
+public class FluidConditionAdapter implements JsonDeserializer<FluidCondition>, JsonSerializer<FluidCondition> {
+
+    private static final String FLUID = "fluid";
+    private static final String TAG = "tag";
+    private static final String STATE = "state";
+
+    @Override
+    public FluidCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject jsonObject = ChatDeserializer.asJsonObject(json, FLUID);
+        Fluid fluid = null;
+        if (jsonObject.has(FLUID)) {
+            MinecraftKey fluidKey = new MinecraftKey(ChatDeserializer.getString(jsonObject, FLUID));
+            fluid = CraftMagicNumbers.getFluid(IRegistry.FLUID.get(fluidKey));
+        }
+        Tag<Fluid> fluidTag = null;
+        if (jsonObject.has(TAG)) {
+            MinecraftKey tagKey = new MinecraftKey(ChatDeserializer.getString(jsonObject, TAG));
+            fluidTag = new CraftFluidTag(TagsInstance.a().getFluidTags(), tagKey);
+        }
+        StateCondition state = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(STATE), StateCondition.class), StateCondition.ANY);
+        return new FluidCondition(fluidTag, fluid, state);
+    }
+
+    @Override
+    public JsonElement serialize(FluidCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src == FluidCondition.ANY) {
+            return JsonNull.INSTANCE;
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            if (src.getFluid() != null) {
+                jsonObject.addProperty(FLUID, src.getFluid().getKey().toString());
+            }
+            if (src.getFluidTag() != null) {
+                jsonObject.addProperty(TAG, src.getFluidTag().getKey().toString());
+            }
+            jsonObject.add(STATE, context.serialize(src.getState()));
+            return jsonObject;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/ItemConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/ItemConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..b7bdf67f5f89ced54621b7640a48e13dce51aed5
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/ItemConditionAdapter.java
@@ -0,0 +1,110 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import io.papermc.paper.advancements.triggers.conditions.EnchantmentCondition.EnchantmentsCondition;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition.ItemsCondition;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.IntegerRange;
+import io.papermc.paper.util.PaperChatDeserializer;
+import net.minecraft.server.ChatDeserializer;
+import net.minecraft.server.MinecraftKey;
+import net.minecraft.server.TagsInstance;
+import org.bukkit.Material;
+import org.bukkit.Tag;
+import org.bukkit.craftbukkit.tag.CraftItemTag;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.potion.PotionType;
+
+import java.lang.reflect.Type;
+import java.util.HashSet;
+import java.util.Set;
+
+public class ItemConditionAdapter implements JsonDeserializer<ItemCondition>, JsonSerializer<ItemCondition> {
+
+    private static final String COUNT = "count";
+    private static final String DURABILITY = "durability";
+    private static final String ENCHANTMENTS = "enchantments";
+    private static final String STORED_ENCHANTMENTS = "stored_enchantments";
+    private static final String ITEM = "item";
+    private static final String TAG = "tag";
+    private static final String POTION = "potion";
+
+    @Override
+    public ItemCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject jsonObject = json.getAsJsonObject();
+        IntegerRange count = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(COUNT), IntegerRange.class), IntegerRange.ANY);
+        IntegerRange durability = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(DURABILITY), IntegerRange.class), IntegerRange.ANY);
+        Material material = null;
+        if (jsonObject.has(ITEM)) {
+            material = CraftMagicNumbers.getMaterial(ChatDeserializer.getItem(jsonObject, ITEM));
+        }
+        Tag<Material> tag = null;
+        if (jsonObject.has(TAG)) {
+            tag = new CraftItemTag(TagsInstance.a().getItemTags(), new MinecraftKey(ChatDeserializer.getString(jsonObject, TAG)));
+        }
+        PotionType potionType = null;
+        if (jsonObject.has(POTION)) {
+            potionType = PotionType.getByKey(CraftNamespacedKey.fromStringOrNull(PaperChatDeserializer.getStringOrDefault(jsonObject, POTION, null)));
+        }
+        EnchantmentsCondition enchantments = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(ENCHANTMENTS), EnchantmentsCondition.class), EnchantmentsCondition.ANY);
+        EnchantmentsCondition storedEnchantments = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(STORED_ENCHANTMENTS), EnchantmentsCondition.class), EnchantmentsCondition.ANY);
+        return new ItemCondition(tag, material, count, durability, enchantments, storedEnchantments, potionType);
+    }
+
+    @Override
+    public JsonElement serialize(ItemCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src == ItemCondition.ANY) {
+            return JsonNull.INSTANCE;
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            if (src.getMaterial() != null) {
+                jsonObject.addProperty(ITEM, src.getMaterial().getKey().toString());
+            }
+            if (src.getMaterialTag() != null) {
+                jsonObject.addProperty(TAG, src.getMaterialTag().getKey().toString());
+            }
+            jsonObject.add(COUNT, context.serialize(src.getCount()));
+            jsonObject.add(DURABILITY, context.serialize(src.getDurability()));
+            jsonObject.add(ENCHANTMENTS, context.serialize(src.getEnchantments()));
+            jsonObject.add(STORED_ENCHANTMENTS, context.serialize(src.getStoredEnchantments()));
+            if (src.getPotionType() != null) {
+                jsonObject.addProperty(POTION, src.getPotionType().getKey().toString());
+            }
+            return jsonObject;
+        }
+    }
+
+    public static class ItemsConditionAdapter implements JsonDeserializer<ItemsCondition>, JsonSerializer<ItemsCondition> {
+        @Override
+        public ItemsCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+            Set<ItemCondition> items = new HashSet<>();
+            JsonArray jsonArray = json.getAsJsonArray();
+            for (JsonElement element : jsonArray) {
+                items.add(context.deserialize(element, ItemCondition.class));
+            }
+            return new ItemsCondition(items);
+        }
+
+        @Override
+        public JsonElement serialize(ItemsCondition src, Type typeOfSrc, JsonSerializationContext context) {
+            if (src == ItemsCondition.ANY) {
+                return JsonNull.INSTANCE;
+            } else {
+                JsonArray jsonArray = new JsonArray();
+                for (ItemCondition item : src) {
+                    jsonArray.add(context.serialize(item));
+                }
+                return jsonArray;
+            }
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/LightConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/LightConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..9c93dde762856a04be4223f14f0b02cdad2921b3
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/LightConditionAdapter.java
@@ -0,0 +1,37 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.IntegerRange;
+
+import java.lang.reflect.Type;
+
+public class LightConditionAdapter implements JsonDeserializer<LightCondition>, JsonSerializer<LightCondition> {
+
+    private static final String LIGHT = "light";
+
+    @Override
+    public LightCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject obj = json.getAsJsonObject();
+        IntegerRange range = MoreObjects.firstNonNull(context.deserialize(obj.get(LIGHT), IntegerRange.class), IntegerRange.ANY);
+        return new LightCondition(range);
+    }
+
+    @Override
+    public JsonElement serialize(LightCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src == LightCondition.DEFAULT) {
+            return JsonNull.INSTANCE;
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            jsonObject.add(LIGHT, context.serialize(src.getRange()));
+            return jsonObject;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/LocationConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/LocationConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..0af8f1923573361fdc54fc3ec2e2ddd4c7390805
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/LocationConditionAdapter.java
@@ -0,0 +1,80 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import io.papermc.paper.advancements.triggers.conditions.LocationCondition.LocationFeature;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.FloatRange;
+import io.papermc.paper.util.PaperChatDeserializer;
+import org.bukkit.NamespacedKey;
+import org.bukkit.block.Biome;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+
+import java.lang.reflect.Type;
+
+public class LocationConditionAdapter implements JsonDeserializer<LocationCondition>, JsonSerializer<LocationCondition> {
+
+    private static final String X = "x";
+    private static final String Y = "y";
+    private static final String Z = "z";
+    private static final String POSITION = "position";
+    private static final String BIOME = "biome";
+    private static final String FEATURE = "feature";
+    private static final String DIMENSION = "dimension";
+    private static final String SMOKEY = "smokey";
+    private static final String LIGHT = "light";
+    private static final String BLOCK = "block";
+
+    @Override
+    public LocationCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject obj = json.getAsJsonObject();
+        JsonObject position = PaperChatDeserializer.getJsonObjectOrDefault(obj, POSITION, new JsonObject());
+        FloatRange xRange = MoreObjects.firstNonNull(context.deserialize(position.get(X), FloatRange.class), FloatRange.ANY);
+        FloatRange yRange = MoreObjects.firstNonNull(context.deserialize(position.get(Y), FloatRange.class), FloatRange.ANY);
+        FloatRange zRange = MoreObjects.firstNonNull(context.deserialize(position.get(Z), FloatRange.class), FloatRange.ANY);
+        NamespacedKey dimension = CraftNamespacedKey.fromStringOrNull(PaperChatDeserializer.getStringOrDefault(obj, DIMENSION, null));
+        Boolean smokey = obj.has(SMOKEY) ? obj.get(SMOKEY).getAsBoolean() : null;
+        LightCondition light = MoreObjects.firstNonNull(context.deserialize(obj.get(LIGHT), LightCondition.class), LightCondition.DEFAULT);
+        BlockCondition block = MoreObjects.firstNonNull(context.deserialize(obj.get(BLOCK), BlockCondition.class), BlockCondition.ANY);
+        Biome biome = Biome.getByKey(CraftNamespacedKey.fromStringOrNull(PaperChatDeserializer.getStringOrDefault(obj, BIOME, null)));
+        LocationFeature locationFeature = LocationFeature.getByIdText(PaperChatDeserializer.getStringOrDefault(obj, FEATURE, null));
+        return new LocationCondition(xRange, yRange, zRange, biome, locationFeature, dimension, smokey, light, block);
+    }
+
+    @Override
+    public JsonElement serialize(LocationCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src == LocationCondition.ANY) {
+            return JsonNull.INSTANCE;
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            if (!src.getXRange().isAnyRange() || !src.getYRange().isAnyRange() || !src.getZRange().isAnyRange()) {
+                JsonObject positionObj = new JsonObject();
+                positionObj.add(X, context.serialize(src.getXRange()));
+                positionObj.add(Y, context.serialize(src.getYRange()));
+                positionObj.add(Z, context.serialize(src.getZRange()));
+                jsonObject.add(POSITION, positionObj);
+            }
+            if (src.getDimension() != null) {
+                jsonObject.addProperty(DIMENSION, src.getDimension().toString());
+            }
+            if (src.getFeature() != null) {
+                jsonObject.addProperty(FEATURE, src.getFeature().getIdText());
+            }
+            if (src.getBiome() != null) {
+                jsonObject.addProperty(BIOME, src.getBiome().getKey().toString());
+            }
+            if (src.isSmokey() != null) {
+                jsonObject.addProperty(SMOKEY, src.isSmokey());
+            }
+            jsonObject.add(LIGHT, context.serialize(src.getLight()));
+            jsonObject.add(BLOCK, context.serialize(src.getBlock()));
+            return jsonObject;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/StateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/StateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..3efb16fb93742d4221165c9206008132347be648
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/StateConditionAdapter.java
@@ -0,0 +1,61 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.common.collect.Lists;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import io.papermc.paper.advancements.triggers.conditions.StateCondition.AbstractProperty;
+import io.papermc.paper.advancements.triggers.conditions.StateCondition.ExactProperty;
+import io.papermc.paper.advancements.triggers.conditions.StateCondition.RangedProperty;
+import io.papermc.paper.util.PaperChatDeserializer;
+import net.minecraft.server.ChatDeserializer;
+
+import java.lang.reflect.Type;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map.Entry;
+
+public class StateConditionAdapter implements JsonDeserializer<StateCondition>, JsonSerializer<StateCondition> {
+    @Override
+    public StateCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject jsonObject = ChatDeserializer.asJsonObject(json, "properties");
+        List<AbstractProperty> properties = Lists.newArrayList();
+        Iterator<Entry<String, JsonElement>> iterator = jsonObject.entrySet().iterator();
+        while (iterator.hasNext()) {
+            Entry<String, JsonElement> entry = iterator.next();
+            properties.add(deserializeProperty(entry.getKey(), entry.getValue()));
+        }
+        return new StateCondition(properties);
+    }
+
+    @Override
+    public JsonElement serialize(StateCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src == StateCondition.ANY) {
+            return JsonNull.INSTANCE;
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            if (!src.getProperties().isEmpty()) {
+                src.getProperties().forEach(abstractProperty -> {
+                    jsonObject.add(abstractProperty.getName(), abstractProperty.toJson());
+                });
+            }
+            return jsonObject;
+        }
+    }
+
+    public static AbstractProperty deserializeProperty(String name, JsonElement element) {
+        if (element.isJsonPrimitive()) {
+            return new ExactProperty(name, element.getAsString());
+        } else {
+            JsonObject jsonObject = ChatDeserializer.asJsonObject(element, "value");
+            String min = PaperChatDeserializer.getStringOrDefault(jsonObject, "min", null);
+            String max = PaperChatDeserializer.getStringOrDefault(jsonObject, "max", null);
+            return (min != null && min.equals(max) ? new ExactProperty(name, min) : new RangedProperty(name, min, max));
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/ValueConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/ValueConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..3629310bd35e32a146dbf361eb3217fb1c12e733
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/ValueConditionAdapter.java
@@ -0,0 +1,73 @@
+package io.papermc.paper.advancements.triggers.conditions;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonNull;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonPrimitive;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.FloatRange;
+import io.papermc.paper.advancements.triggers.conditions.ValueCondition.IntegerRange;
+import net.minecraft.server.ChatDeserializer;
+
+import java.lang.reflect.Type;
+
+public class ValueConditionAdapter implements JsonSerializer<ValueCondition> {
+
+    private static final String VALUE = "value";
+    private static final String MIN = "min";
+    private static final String MAX = "max";
+
+    @Override
+    public JsonElement serialize(ValueCondition src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src.isAnyRange()) {
+            return JsonNull.INSTANCE;
+        } else if (src.getMin() != null && src.getMin().equals(src.getMax())) {
+            return new JsonPrimitive(src.getMin());
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            if (src.getMin() != null) {
+                jsonObject.addProperty(MIN, src.getMin());
+            }
+            if (src.getMax() != null) {
+                jsonObject.addProperty(MAX, src.getMax());
+            }
+            return jsonObject;
+        }
+    }
+
+    public static class FloatRangeAdapter implements JsonDeserializer<FloatRange> {
+
+        @Override
+        public FloatRange deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+            if (ChatDeserializer.b(json)) {
+                float value = ChatDeserializer.asFloat(json, VALUE);
+                return new FloatRange(value, value);
+            } else {
+                JsonObject jsonObject = ChatDeserializer.asJsonObject(json, VALUE);
+                Float min = jsonObject.has(MIN) ? jsonObject.get(MIN).getAsFloat() : null;
+                Float max = jsonObject.has(MAX) ? jsonObject.get(MAX).getAsFloat() : null;
+                return new FloatRange(min, max);
+            }
+        }
+    }
+
+    public static class IntegerRangeAdapter implements JsonDeserializer<IntegerRange> {
+
+        @Override
+        public IntegerRange deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+            if (ChatDeserializer.b(json)) {
+                int value = ChatDeserializer.asInt(json, VALUE);
+                return new IntegerRange(value, value);
+            } else {
+                JsonObject jsonObject = ChatDeserializer.asJsonObject(json, VALUE);
+                Integer min = jsonObject.has(MIN) ? jsonObject.get(MIN).getAsInt() : null;
+                Integer max = jsonObject.has(MAX) ? jsonObject.get(MAX).getAsInt() : null;
+                return new IntegerRange(min, max);
+            }
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/AlternativePredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/AlternativePredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..35f431a6fa39f6b285f6653407409f9dbfd0fd33
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/AlternativePredicateConditionAdapter.java
@@ -0,0 +1,22 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import net.minecraft.server.ChatDeserializer;
+
+public class AlternativePredicateConditionAdapter extends PredicateConditionAdapter<AlternativePredicateCondition> {
+
+    private static final String TERMS = "terms";
+
+    @Override
+    public AlternativePredicateCondition deserialize(JsonObject jsonObject, JsonDeserializationContext context) {
+        PredicateCondition[] terms = ChatDeserializer.getDeserializedType(jsonObject, TERMS, context, PredicateCondition[].class);
+        return new AlternativePredicateCondition(terms);
+    }
+
+    @Override
+    public void serialize(JsonObject jsonObject, AlternativePredicateCondition condition, JsonSerializationContext context) {
+        jsonObject.add(TERMS, context.serialize(condition.getTerms()));
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/BlockStatePropertyPredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/BlockStatePropertyPredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..89105645d97e11e5409123779b86182b30bda29e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/BlockStatePropertyPredicateConditionAdapter.java
@@ -0,0 +1,36 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.conditions.StateCondition;
+import net.minecraft.server.Block;
+import net.minecraft.server.ChatDeserializer;
+import net.minecraft.server.IRegistry;
+import net.minecraft.server.MinecraftKey;
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+
+public class BlockStatePropertyPredicateConditionAdapter extends PredicateConditionAdapter<BlockStatePropertyPredicateCondition> {
+
+    private static final String BLOCK = "block";
+    private static final String PROPERTIES = "properties";
+
+    @Override
+    public BlockStatePropertyPredicateCondition deserialize(JsonObject jsonObject, JsonDeserializationContext context) {
+        MinecraftKey key = new MinecraftKey(ChatDeserializer.getString(jsonObject, BLOCK));
+        Material block = CraftMagicNumbers.getMaterial((Block) IRegistry.BLOCK.getOptional(key).orElseThrow(() -> {
+            return new IllegalArgumentException("Can't find block " + key);
+        }));
+        StateCondition state = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(PROPERTIES), StateCondition.class), StateCondition.ANY);
+        // TODO verify states on block
+        return new BlockStatePropertyPredicateCondition(block, state);
+    }
+
+    @Override
+    public void serialize(JsonObject jsonObject, BlockStatePropertyPredicateCondition condition, JsonSerializationContext context) {
+        jsonObject.addProperty(BLOCK, condition.getBlock().getKey().toString());
+        jsonObject.add(PROPERTIES, context.serialize(condition.getState()));
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/BonusTablePredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/BonusTablePredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..5a2d1fed17920fcb10696f537f407ae6d8fe7279
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/BonusTablePredicateConditionAdapter.java
@@ -0,0 +1,27 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import net.minecraft.server.ChatDeserializer;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.enchantments.Enchantment;
+
+public class BonusTablePredicateConditionAdapter extends PredicateConditionAdapter<BonusTablePredicateCondition> {
+
+    private static final String ENCHANTMENT = "enchantment";
+    private static final String CHANCES = "chances";
+
+    @Override
+    public BonusTablePredicateCondition deserialize(JsonObject jsonObject, JsonDeserializationContext context) {
+        Enchantment enchantment = Enchantment.getByKey(CraftNamespacedKey.fromString(ChatDeserializer.getString(jsonObject, ENCHANTMENT)));
+        float[] chances = ChatDeserializer.getDeserializedType(jsonObject, CHANCES, context, float[].class);
+        return new BonusTablePredicateCondition(enchantment, chances);
+    }
+
+    @Override
+    public void serialize(JsonObject jsonObject, BonusTablePredicateCondition condition, JsonSerializationContext context) {
+        jsonObject.addProperty(ENCHANTMENT, condition.getEnchantment().getKey().toString());
+        jsonObject.add(CHANCES, context.serialize(condition.getChances()));
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/DamageSourcePropertiesPredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/DamageSourcePropertiesPredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..baf279db9bc27784c6f823bd068e5fc4fe0898b6
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/DamageSourcePropertiesPredicateConditionAdapter.java
@@ -0,0 +1,23 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.conditions.DamageSourceCondition;
+
+public class DamageSourcePropertiesPredicateConditionAdapter extends PredicateConditionAdapter<DamageSourcePropertiesPredicateCondition> {
+
+    private static final String PREDICATE = "predicate";
+
+    @Override
+    public DamageSourcePropertiesPredicateCondition deserialize(JsonObject jsonObject, JsonDeserializationContext context) {
+        DamageSourceCondition damageType = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(PREDICATE), DamageSourceCondition.class), DamageSourceCondition.ANY);
+        return new DamageSourcePropertiesPredicateCondition(damageType);
+    }
+
+    @Override
+    public void serialize(JsonObject jsonObject, DamageSourcePropertiesPredicateCondition condition, JsonSerializationContext context) {
+        jsonObject.add(PREDICATE, context.serialize(condition.getDamageType()));
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/EntityPropertyPredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/EntityPropertyPredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..bbc3d925abc6c5442ab64b9412d537cbe72d922d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/EntityPropertyPredicateConditionAdapter.java
@@ -0,0 +1,26 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.conditions.EntityCondition;
+import net.minecraft.server.ChatDeserializer;
+
+public class EntityPropertyPredicateConditionAdapter extends PredicateConditionAdapter<EntityPropertyPredicateCondition> {
+
+    private static final String PREDICATE = "predicate";
+    private static final String ENTITY = "entity";
+
+    @Override
+    public EntityPropertyPredicateCondition deserialize(JsonObject jsonObject, JsonDeserializationContext context) {
+        EntityCondition entity = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(PREDICATE), EntityCondition.class), EntityCondition.ANY);
+        return new EntityPropertyPredicateCondition(entity, EntityTarget.getByName(ChatDeserializer.getString(jsonObject, ENTITY)));
+    }
+
+    @Override
+    public void serialize(JsonObject jsonObject, EntityPropertyPredicateCondition condition, JsonSerializationContext context) {
+        jsonObject.add(PREDICATE, context.serialize(condition.getEntity()));
+        jsonObject.addProperty(ENTITY, condition.getTarget().getName());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/EntityScorePredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/EntityScorePredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..10985ca19ba1a4983ed5e32305dfca509c0845bf
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/EntityScorePredicateConditionAdapter.java
@@ -0,0 +1,44 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.common.collect.Maps;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.conditions.EntityScorePredicateCondition;
+import io.papermc.paper.advancements.triggers.conditions.predicates.values.ValueRange;
+import net.minecraft.server.ChatDeserializer;
+
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+
+public class EntityScorePredicateConditionAdapter extends PredicateConditionAdapter<EntityScorePredicateCondition> {
+
+    private static final String SCORES = "scores";
+    private static final String ENTITY = "entity";
+
+    @Override
+    public EntityScorePredicateCondition deserialize(JsonObject jsonObject, JsonDeserializationContext context) {
+        Map<String, ValueRange> scores = Maps.newLinkedHashMap();
+        Iterator<Entry<String, JsonElement>> iterator = ChatDeserializer.getJsonObject(jsonObject, SCORES).entrySet().iterator();
+        while (iterator.hasNext()) {
+            Entry<String, JsonElement> entry = iterator.next();
+            scores.put(entry.getKey(), ChatDeserializer.asDeserializedType(entry.getValue(), "score", context, ValueRange.class));
+        }
+        EntityTarget target = EntityTarget.getByName(ChatDeserializer.getString(jsonObject, ENTITY));
+        return new EntityScorePredicateCondition(scores, target);
+    }
+
+    @Override
+    public void serialize(JsonObject jsonObject, EntityScorePredicateCondition condition, JsonSerializationContext context) {
+        JsonObject scores = new JsonObject();
+        Iterator<Entry<String, ValueRange>> iterator = condition.getScores().entrySet().iterator();
+        while (iterator.hasNext()) {
+            Entry<String, ValueRange> entry = iterator.next();
+            jsonObject.add(entry.getKey(), context.serialize(entry.getValue()));
+        }
+        jsonObject.add(SCORES, scores);
+        jsonObject.addProperty(ENTITY, condition.getTarget().getName());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/InvertedPredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/InvertedPredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..c701b341191351b71012ff0c6a0c94e5fdab340f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/InvertedPredicateConditionAdapter.java
@@ -0,0 +1,22 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import net.minecraft.server.ChatDeserializer;
+
+public class InvertedPredicateConditionAdapter extends PredicateConditionAdapter<InvertedPredicateCondition> {
+
+    private static final String TERM = "term";
+
+    @Override
+    public InvertedPredicateCondition deserialize(JsonObject jsonObject, JsonDeserializationContext context) {
+        PredicateCondition term = ChatDeserializer.getDeserializedType(jsonObject, TERM, context, PredicateCondition.class);
+        return new InvertedPredicateCondition(term);
+    }
+
+    @Override
+    public void serialize(JsonObject jsonObject, InvertedPredicateCondition condition, JsonSerializationContext context) {
+        jsonObject.add(TERM, context.serialize(condition.getTerm()));
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/KilledByPlayerPredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/KilledByPlayerPredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..da045821481650bbe7395702d9dcdb21a0dc1a51
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/KilledByPlayerPredicateConditionAdapter.java
@@ -0,0 +1,16 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+
+public class KilledByPlayerPredicateConditionAdapter extends PredicateConditionAdapter<KilledByPlayerPredicateCondition> {
+
+    @Override
+    public KilledByPlayerPredicateCondition deserialize(JsonObject jsonObject, JsonDeserializationContext context) {
+        return KilledByPlayerPredicateCondition.INSTANCE;
+    }
+
+    @Override
+    public void serialize(JsonObject jsonObject, KilledByPlayerPredicateCondition condition, JsonSerializationContext context) { }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/LocationCheckPredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/LocationCheckPredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..af6928b6f157f7769e87347bc58947bf4f7be199
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/LocationCheckPredicateConditionAdapter.java
@@ -0,0 +1,40 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.conditions.LocationCondition;
+import io.papermc.paper.util.PaperChatDeserializer;
+import org.bukkit.Location;
+
+public class LocationCheckPredicateConditionAdapter extends PredicateConditionAdapter<LocationCheckPredicateCondition> {
+
+    private static final String PREDICATE = "predicate";
+    private static final String OFFSET_X = "offsetX";
+    private static final String OFFSET_Y = "offsetY";
+    private static final String OFFSET_Z = "offsetZ";
+
+    @Override
+    public LocationCheckPredicateCondition deserialize(JsonObject jsonObject, JsonDeserializationContext context) {
+        LocationCondition location = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(PREDICATE), LocationCondition.class), LocationCondition.ANY);
+        int x = PaperChatDeserializer.getIntOrDefault(jsonObject, OFFSET_X, 0);
+        int y = PaperChatDeserializer.getIntOrDefault(jsonObject, OFFSET_Y, 0);
+        int z = PaperChatDeserializer.getIntOrDefault(jsonObject, OFFSET_Z, 0);
+        return new LocationCheckPredicateCondition(location, new Location(null, x, y, z));
+    }
+
+    @Override
+    public void serialize(JsonObject jsonObject, LocationCheckPredicateCondition condition, JsonSerializationContext context) {
+        jsonObject.add(PREDICATE, context.serialize(condition.getLocation()));
+        if (condition.getBlockPosition().getBlockX() != 0) {
+            jsonObject.addProperty(OFFSET_X, condition.getBlockPosition().getBlockX());
+        }
+        if (condition.getBlockPosition().getBlockY() != 0) {
+            jsonObject.addProperty(OFFSET_Y, condition.getBlockPosition().getBlockY());
+        }
+        if (condition.getBlockPosition().getBlockZ() != 0) {
+            jsonObject.addProperty(OFFSET_Z, condition.getBlockPosition().getBlockZ());
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/MatchToolPredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/MatchToolPredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..baeea64ddcd975bbce3924a80d1a9ca40aa716bf
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/MatchToolPredicateConditionAdapter.java
@@ -0,0 +1,23 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.common.base.MoreObjects;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.conditions.ItemCondition;
+
+public class MatchToolPredicateConditionAdapter extends PredicateConditionAdapter<MatchToolPredicateCondition> {
+
+    private static final String PREDICATE = "predicate";
+
+    @Override
+    public MatchToolPredicateCondition deserialize(JsonObject jsonObject, JsonDeserializationContext context) {
+        ItemCondition item = MoreObjects.firstNonNull(context.deserialize(jsonObject.get(PREDICATE), ItemCondition.class), ItemCondition.ANY);
+        return new MatchToolPredicateCondition(item);
+    }
+
+    @Override
+    public void serialize(JsonObject jsonObject, MatchToolPredicateCondition condition, JsonSerializationContext context) {
+        jsonObject.add(PREDICATE, context.serialize(condition.getItem()));
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/PredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/PredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..b86b79cc5df2af140e38109209052361dfb480b9
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/PredicateConditionAdapter.java
@@ -0,0 +1,52 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import net.minecraft.server.ChatDeserializer;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+
+import java.lang.reflect.Type;
+
+public abstract class PredicateConditionAdapter<T extends PredicateCondition> {
+
+    public abstract T deserialize(JsonObject jsonObject, JsonDeserializationContext context);
+
+    public abstract void serialize(JsonObject jsonObject, T condition, JsonSerializationContext context);
+
+    public static class PredicateGsonAdapter implements JsonDeserializer<PredicateCondition>, JsonSerializer<PredicateCondition> {
+
+        private static final String CONDITION = "condition";
+
+        @Override
+        public PredicateCondition deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+            JsonObject jsonObject = ChatDeserializer.asJsonObject(json, "loot condition");
+            NamespacedKey key = CraftNamespacedKey.fromStringOrNull(ChatDeserializer.getString(jsonObject, CONDITION));
+            return getAdapter(key).deserialize(jsonObject, context);
+        }
+
+        @Override
+        public JsonElement serialize(PredicateCondition src, Type typeOfSrc, JsonSerializationContext context) {
+            JsonObject jsonObject = new JsonObject();
+            jsonObject.addProperty(CONDITION, src.getKey().toString());
+            getAdapter(src.getKey()).serialize(jsonObject,src, context);
+            return jsonObject;
+        }
+
+        private static <T extends PredicateCondition> PredicateConditionAdapter<T> getAdapter(NamespacedKey key) {
+            if (key == null) {
+                throw new JsonParseException("Unrecognized key '" + key + "'");
+            }
+            PredicateConditionAdapter<?> adapter = PredicateConditions.getAdapter(key);
+            if (adapter == null) {
+                throw new JsonParseException("Could not find adapter for '" + key + "'");
+            }
+            return (PredicateConditionAdapter<T>) adapter;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/PredicateConditions.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/PredicateConditions.java
new file mode 100644
index 0000000000000000000000000000000000000000..2a13d695a91f96e1cd1502b9388ec0f80c874a36
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/PredicateConditions.java
@@ -0,0 +1,49 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.common.collect.Maps;
+import io.papermc.paper.advancements.CraftAdvancementsManager;
+import io.papermc.paper.advancements.triggers.conditions.EntityScorePredicateCondition;
+import io.papermc.paper.advancements.triggers.conditions.predicates.PredicateConditionAdapter.PredicateGsonAdapter;
+import io.papermc.paper.advancements.triggers.conditions.predicates.values.ValueRange;
+import io.papermc.paper.advancements.triggers.conditions.predicates.values.ValueRangeAdapter;
+import org.bukkit.NamespacedKey;
+
+import java.util.Map;
+
+public class PredicateConditions {
+
+    private static Map<NamespacedKey, PredicateConditionAdapter<?>> LOOT_ITEM_CONDITION_ADAPTER_MAP = Maps.newHashMap();
+
+    static {
+        CraftAdvancementsManager.addHierarchyAdapter(ValueRange.class, new ValueRangeAdapter());
+
+        register(InvertedPredicateCondition.KEY, new InvertedPredicateConditionAdapter());
+        register(AlternativePredicateCondition.KEY, new AlternativePredicateConditionAdapter());
+        register(RandomChancePredicateCondition.KEY, new RandomChangePredicateConditionAdapter());
+        register(RandomChanceWithLootingPredicateCondition.KEY, new RandomChanceWithLootingPredicateConditionAdapter());
+        register(EntityPropertyPredicateCondition.KEY, new EntityPropertyPredicateConditionAdapter());
+        register(KilledByPlayerPredicateCondition.KEY, new KilledByPlayerPredicateConditionAdapter());
+        register(EntityScorePredicateCondition.KEY, new EntityScorePredicateConditionAdapter());
+        register(BlockStatePropertyPredicateCondition.KEY, new BlockStatePropertyPredicateConditionAdapter());
+        register(MatchToolPredicateCondition.KEY, new MatchToolPredicateConditionAdapter());
+        register(BonusTablePredicateCondition.KEY, new BonusTablePredicateConditionAdapter());
+        register(SurvivesExplosionPredicateCondition.KEY, new SurvivesExplosionPredicateConditionAdapter());
+        register(DamageSourcePropertiesPredicateCondition.KEY, new DamageSourcePropertiesPredicateConditionAdapter());
+        register(LocationCheckPredicateCondition.KEY, new LocationCheckPredicateConditionAdapter());
+        register(WeatherCheckPredicateCondition.KEY, new WeatherCheckPredicateConditionAdapter());
+        register(ReferencePredicateCondition.KEY, new ReferencePredicateConditionAdapter());
+        register(TimeCheckPredicateCondition.KEY, new TimeCheckPredicateConditionAdapter());
+
+        CraftAdvancementsManager.addHierarchyAdapter(PredicateCondition.class, new PredicateGsonAdapter());
+    }
+
+    public static void init() { };
+
+    private static <T extends PredicateCondition, A extends PredicateConditionAdapter<T>> void register(NamespacedKey key, A adapter) {
+        LOOT_ITEM_CONDITION_ADAPTER_MAP.put(key, adapter);
+    }
+
+    public static PredicateConditionAdapter<?> getAdapter(NamespacedKey key) {
+        return LOOT_ITEM_CONDITION_ADAPTER_MAP.get(key);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/RandomChanceWithLootingPredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/RandomChanceWithLootingPredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..a8387a77eae58490a4cc24fc290347f99cb46e98
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/RandomChanceWithLootingPredicateConditionAdapter.java
@@ -0,0 +1,23 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import net.minecraft.server.ChatDeserializer;
+
+public class RandomChanceWithLootingPredicateConditionAdapter extends PredicateConditionAdapter<RandomChanceWithLootingPredicateCondition> {
+
+    private static final String CHANCE = "chance";
+    private static final String MULTIPLER = "looting_multiplier";
+
+    @Override
+    public RandomChanceWithLootingPredicateCondition deserialize(JsonObject jsonObject, JsonDeserializationContext context) {
+        return new RandomChanceWithLootingPredicateCondition(ChatDeserializer.getFloat(jsonObject, CHANCE), ChatDeserializer.getFloat(jsonObject, MULTIPLER));
+    }
+
+    @Override
+    public void serialize(JsonObject jsonObject, RandomChanceWithLootingPredicateCondition condition, JsonSerializationContext context) {
+        jsonObject.addProperty(CHANCE, condition.getPrecent());
+        jsonObject.addProperty(MULTIPLER, condition.getMultipler());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/RandomChangePredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/RandomChangePredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..4c9f86c27809596b846ccf36fb36dcd236ebcf23
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/RandomChangePredicateConditionAdapter.java
@@ -0,0 +1,21 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import net.minecraft.server.ChatDeserializer;
+
+public class RandomChangePredicateConditionAdapter extends PredicateConditionAdapter<RandomChancePredicateCondition> {
+
+    private static final String CHANCE = "chance";
+
+    @Override
+    public RandomChancePredicateCondition deserialize(JsonObject jsonObject, JsonDeserializationContext context) {
+        return new RandomChancePredicateCondition(ChatDeserializer.getFloat(jsonObject, CHANCE));
+    }
+
+    @Override
+    public void serialize(JsonObject jsonObject, RandomChancePredicateCondition condition, JsonSerializationContext context) {
+        jsonObject.addProperty(CHANCE, condition.getChance());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/ReferencePredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/ReferencePredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..dc305be6d39ddefc33fe42e0e42d23d48794b00d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/ReferencePredicateConditionAdapter.java
@@ -0,0 +1,26 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import net.minecraft.server.ChatDeserializer;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+
+import javax.print.attribute.standard.MediaSize.NA;
+
+public class ReferencePredicateConditionAdapter extends PredicateConditionAdapter<ReferencePredicateCondition> {
+
+    private static final String NAME = "name";
+
+    @Override
+    public ReferencePredicateCondition deserialize(JsonObject jsonObject, JsonDeserializationContext context) {
+        NamespacedKey reference = CraftNamespacedKey.fromString(ChatDeserializer.getString(jsonObject, NAME));
+        return new ReferencePredicateCondition(reference);
+    }
+
+    @Override
+    public void serialize(JsonObject jsonObject, ReferencePredicateCondition condition, JsonSerializationContext context) {
+        jsonObject.addProperty(NAME, condition.getReference().toString());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/SurvivesExplosionPredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/SurvivesExplosionPredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..e72f3820d71e57fa5a6eb2acb65dc897364a3347
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/SurvivesExplosionPredicateConditionAdapter.java
@@ -0,0 +1,16 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+
+public class SurvivesExplosionPredicateConditionAdapter extends PredicateConditionAdapter<SurvivesExplosionPredicateCondition> {
+
+    @Override
+    public SurvivesExplosionPredicateCondition deserialize(JsonObject jsonObject, JsonDeserializationContext context) {
+        return SurvivesExplosionPredicateCondition.INSTANCE;
+    }
+
+    @Override
+    public void serialize(JsonObject jsonObject, SurvivesExplosionPredicateCondition condition, JsonSerializationContext context) { }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/TimeCheckPredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/TimeCheckPredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..be50b7977277468964d411525ed01a1628ec58a6
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/TimeCheckPredicateConditionAdapter.java
@@ -0,0 +1,26 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import io.papermc.paper.advancements.triggers.conditions.predicates.values.ValueRange;
+import net.minecraft.server.ChatDeserializer;
+
+public class TimeCheckPredicateConditionAdapter extends PredicateConditionAdapter<TimeCheckPredicateCondition> {
+
+    private static final String PERIOD = "period";
+    private static final String VALUE = "value";
+
+    @Override
+    public TimeCheckPredicateCondition deserialize(JsonObject jsonObject, JsonDeserializationContext context) {
+        Long peroid = jsonObject.has(PERIOD) ? ChatDeserializer.getLong(jsonObject, PERIOD) : null;
+        ValueRange value = ChatDeserializer.getDeserializedType(jsonObject, VALUE, context, ValueRange.class);
+        return new TimeCheckPredicateCondition(peroid, value);
+    }
+
+    @Override
+    public void serialize(JsonObject jsonObject, TimeCheckPredicateCondition condition, JsonSerializationContext context) {
+        jsonObject.addProperty(PERIOD, condition.getPeriod());
+        jsonObject.add(VALUE, context.serialize(condition.getValue()));
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/WeatherCheckPredicateConditionAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/WeatherCheckPredicateConditionAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..7869e9a4a1ed46f6abc25b6abafcd9503590b9f3
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/WeatherCheckPredicateConditionAdapter.java
@@ -0,0 +1,25 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import net.minecraft.server.ChatDeserializer;
+
+public class WeatherCheckPredicateConditionAdapter extends PredicateConditionAdapter<WeatherCheckPredicateCondition> {
+
+    private static final String RAINING = "raining";
+    private static final String THUNDERING = "thundering";
+
+    @Override
+    public WeatherCheckPredicateCondition deserialize(JsonObject jsonObject, JsonDeserializationContext context) {
+        Boolean isRaining = jsonObject.has(RAINING) ? ChatDeserializer.getBoolean(jsonObject, RAINING) : null;
+        Boolean isThundering = jsonObject.has(THUNDERING) ? ChatDeserializer.getBoolean(jsonObject, THUNDERING) : null;
+        return new WeatherCheckPredicateCondition(isRaining, isThundering);
+    }
+
+    @Override
+    public void serialize(JsonObject jsonObject, WeatherCheckPredicateCondition condition, JsonSerializationContext context) {
+        jsonObject.addProperty(RAINING, condition.getRaining());
+        jsonObject.addProperty(THUNDERING, condition.getThundering());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/values/ValueRangeAdapter.java b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/values/ValueRangeAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..bbc852021b2701c674b5daa6d91573e5c3cdcc24
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancements/triggers/conditions/predicates/values/ValueRangeAdapter.java
@@ -0,0 +1,44 @@
+package io.papermc.paper.advancements.triggers.conditions.predicates.values;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonPrimitive;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import net.minecraft.server.ChatDeserializer;
+
+import java.lang.reflect.Type;
+
+public class ValueRangeAdapter implements JsonDeserializer<ValueRange>, JsonSerializer<ValueRange> {
+
+    private static final String MIN = "min";
+    private static final String MAX = "max";
+    private static final String VALUE = "value";
+
+    @Override
+    public ValueRange deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        if (ChatDeserializer.isNumber(json)) {
+            return new ValueRange(ChatDeserializer.asFloat(json, VALUE));
+        } else {
+            JsonObject jsonObject = ChatDeserializer.asJsonObject(json, VALUE);
+            float min = ChatDeserializer.getFloat(jsonObject, MIN);
+            float max = ChatDeserializer.getFloat(jsonObject, MAX);
+            return new ValueRange(min, max);
+        }
+    }
+
+    @Override
+    public JsonElement serialize(ValueRange src, Type typeOfSrc, JsonSerializationContext context) {
+        if (src.getMax() == src.getMin()) {
+            return new JsonPrimitive(src.getMax());
+        } else {
+            JsonObject jsonObject = new JsonObject();
+            jsonObject.addProperty(MIN, src.getMin());
+            jsonObject.addProperty(MAX, src.getMax());
+            return jsonObject;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/tag/CraftEntityTag.java b/src/main/java/io/papermc/paper/tag/CraftEntityTag.java
new file mode 100644
index 0000000000000000000000000000000000000000..a6f1bbd78401cdc61e3742e0530105defe8e49f0
--- /dev/null
+++ b/src/main/java/io/papermc/paper/tag/CraftEntityTag.java
@@ -0,0 +1,31 @@
+package io.papermc.paper.tag;
+
+import net.minecraft.server.EntityTypes;
+import net.minecraft.server.IRegistry;
+import net.minecraft.server.MinecraftKey;
+import net.minecraft.server.Tags;
+import org.bukkit.craftbukkit.tag.CraftTag;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.entity.EntityType;
+
+import java.util.Collections;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+public class CraftEntityTag extends CraftTag<EntityTypes<?>, EntityType> {
+
+    public CraftEntityTag(Tags<EntityTypes<?>> registry, MinecraftKey tag) {
+        super(registry, tag);
+    }
+
+    @Override
+    public boolean isTagged(EntityType item) {
+        return getHandle().isTagged(CraftMagicNumbers.getEntityTypes(item));
+    }
+
+    @Override
+    public Set<EntityType> getValues() {
+        return Collections.unmodifiableSet(getHandle().getTagged().stream().map(CraftMagicNumbers::getEntityType).collect(Collectors.toSet()));
+    }
+}
diff --git a/src/main/java/io/papermc/paper/util/PaperChatDeserializer.java b/src/main/java/io/papermc/paper/util/PaperChatDeserializer.java
new file mode 100644
index 0000000000000000000000000000000000000000..bc6009daa321d79c5ed22a90ce4234ddc5f5ac59
--- /dev/null
+++ b/src/main/java/io/papermc/paper/util/PaperChatDeserializer.java
@@ -0,0 +1,32 @@
+package io.papermc.paper.util;
+
+import com.google.gson.JsonArray;
+import com.google.gson.JsonObject;
+import net.minecraft.server.ChatDeserializer;
+
+public class PaperChatDeserializer {
+
+    public static boolean isMissingOrNull(JsonObject jsonObject, String key) {
+        return !jsonObject.has(key) || jsonObject.get(key).isJsonNull();
+    }
+
+    public static String getStringOrDefault(JsonObject jsonObject, String key, String def) {
+        return isMissingOrNull(jsonObject, key) ? def : ChatDeserializer.getString(jsonObject, key);
+    }
+
+    public static Boolean getBooleanOrDefault(JsonObject jsonObject, String key, Boolean def) {
+        return isMissingOrNull(jsonObject, key) ? def : (Boolean) ChatDeserializer.getBoolean(jsonObject, key);
+    }
+
+    public static Integer getIntOrDefault(JsonObject jsonObject, String key, Integer def) {
+        return isMissingOrNull(jsonObject, key) ? def : (Integer) ChatDeserializer.getInt(jsonObject, key);
+    }
+
+    public static JsonObject getJsonObjectOrDefault(JsonObject jsonObject, String key, JsonObject def) {
+        return isMissingOrNull(jsonObject, key) ? def : ChatDeserializer.getJsonObject(jsonObject, key);
+    }
+
+    public static JsonArray getJsonArrayOrDefault(JsonObject jsonObject, String key, JsonArray def) {
+        return isMissingOrNull(jsonObject, key) ? def : ChatDeserializer.getJsonArray(jsonObject, key);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Advancement.java b/src/main/java/net/minecraft/server/Advancement.java
index c405047c00d354bbc1449fd2f917b73f980ef1a5..22a3bd24f39b2b52bd141bcd4aefb7c878cc0a84 100644
--- a/src/main/java/net/minecraft/server/Advancement.java
+++ b/src/main/java/net/minecraft/server/Advancement.java
@@ -26,7 +26,7 @@ public class Advancement {
     private final String[][] requirements;
     private final Set<Advancement> children = Sets.newLinkedHashSet();
     private final IChatBaseComponent chatComponent;
-    public final org.bukkit.advancement.Advancement bukkit = new org.bukkit.craftbukkit.advancement.CraftAdvancement(this); // CraftBukkit
+    public final org.bukkit.advancement.Advancement bukkit; // CraftBukkit // Paper - moved to end of ctor
 
     public Advancement(MinecraftKey minecraftkey, @Nullable Advancement advancement, @Nullable AdvancementDisplay advancementdisplay, AdvancementRewards advancementrewards, Map<String, Criterion> map, String[][] astring) {
         this.key = minecraftkey;
@@ -52,12 +52,15 @@ public class Advancement {
             this.chatComponent = ChatComponentUtils.a((IChatBaseComponent) ichatmutablecomponent1).a(enumchatformat);
         }
 
+       bukkit = new org.bukkit.craftbukkit.advancement.CraftAdvancement(this, org.bukkit.craftbukkit.util.CraftNamespacedKey.fromMinecraft(minecraftkey)); // Paper - moved to end of ctor
     }
 
+    public Advancement.SerializedAdvancement getSerializedAdvancement() { return a(); } // Paper - OBFHELPER
     public Advancement.SerializedAdvancement a() {
         return new Advancement.SerializedAdvancement(this.parent == null ? null : this.parent.getName(), this.display, this.rewards, this.criteria, this.requirements);
     }
 
+    public Advancement getParent() { return b(); } // Paper - OBFHELPER
     @Nullable
     public Advancement b() {
         return this.parent;
@@ -76,6 +79,7 @@ public class Advancement {
         return "SimpleAdvancement{id=" + this.getName() + ", parent=" + (this.parent == null ? "null" : this.parent.getName()) + ", display=" + this.display + ", rewards=" + this.rewards + ", criteria=" + this.criteria + ", requirements=" + Arrays.deepToString(this.requirements) + '}';
     }
 
+    public Iterable<Advancement> getChildren() { return this.children; } // Paper - OBFHELPER
     public Iterable<Advancement> e() {
         return this.children;
     }
@@ -230,6 +234,7 @@ public class Advancement {
             return advancement;
         }
 
+        public JsonObject toJson() { return b(); } // Paper - OBFHELPER
         public JsonObject b() {
             if (this.f == null) {
                 this.f = this.g.createRequirements(this.e.keySet());
diff --git a/src/main/java/net/minecraft/server/AdvancementDisplay.java b/src/main/java/net/minecraft/server/AdvancementDisplay.java
index b0d4b7a67679a35fa8f88c241193c0f3814f1e7b..c17fc3e0c3b83da578a4ad51e9e3f3a253d3682f 100644
--- a/src/main/java/net/minecraft/server/AdvancementDisplay.java
+++ b/src/main/java/net/minecraft/server/AdvancementDisplay.java
@@ -74,6 +74,7 @@ public class AdvancementDisplay {
         }
     }
 
+    public static ItemStack deserializeItemStack(JsonObject jsonObject) { return b(jsonObject); } // Paper - OBFHELPER
     private static ItemStack b(JsonObject jsonobject) {
         if (!jsonobject.has("item")) {
             throw new JsonSyntaxException("Unsupported icon type, currently only items are supported (add 'item' key)");
diff --git a/src/main/java/net/minecraft/server/ChatDeserializer.java b/src/main/java/net/minecraft/server/ChatDeserializer.java
index 094a217b00393f648f85946168b13b5837ef90df..678450bae8d9c15ff28f1e252ed23dc34438f24c 100644
--- a/src/main/java/net/minecraft/server/ChatDeserializer.java
+++ b/src/main/java/net/minecraft/server/ChatDeserializer.java
@@ -24,6 +24,7 @@ public class ChatDeserializer {
         return !f(jsonobject, s) ? false : jsonobject.getAsJsonPrimitive(s).isString();
     }
 
+    public static boolean isNumber(JsonElement jsonElement) { return b(jsonElement); } // Paper - OBFHELPER
     public static boolean b(JsonElement jsonelement) {
         return !jsonelement.isJsonPrimitive() ? false : jsonelement.getAsJsonPrimitive().isNumber();
     }
@@ -40,6 +41,7 @@ public class ChatDeserializer {
         return jsonobject == null ? false : jsonobject.get(s) != null;
     }
 
+    public static String getStringRaw(JsonElement jsonElement, String key) { return a(jsonElement, key); } // Paper - OBFHELPER
     public static String a(JsonElement jsonelement, String s) {
         if (jsonelement.isJsonPrimitive()) {
             return jsonelement.getAsString();
@@ -48,6 +50,7 @@ public class ChatDeserializer {
         }
     }
 
+    public static String getString(JsonObject jsonObject, String key) { return h(jsonObject, key); } // Paper - OBFHELPER
     public static String h(JsonObject jsonobject, String s) {
         if (jsonobject.has(s)) {
             return a(jsonobject.get(s), s);
@@ -72,6 +75,7 @@ public class ChatDeserializer {
         }
     }
 
+    public static Item getItem(JsonObject jsonObject, String key) { return i(jsonObject, key); } // Paper - OBFHELPER
     public static Item i(JsonObject jsonobject, String s) {
         if (jsonobject.has(s)) {
             return b(jsonobject.get(s), s);
@@ -80,6 +84,7 @@ public class ChatDeserializer {
         }
     }
 
+    public static boolean asBoolean(JsonElement jsonElement, String name) { return c(jsonElement, name); } // Paper - OBFHELPER
     public static boolean c(JsonElement jsonelement, String s) {
         if (jsonelement.isJsonPrimitive()) {
             return jsonelement.getAsBoolean();
@@ -88,6 +93,7 @@ public class ChatDeserializer {
         }
     }
 
+    public static boolean getBoolean(JsonObject jsonObject, String key) { return j(jsonObject, key); } // Paper - OBFHELPER
     public static boolean j(JsonObject jsonobject, String s) {
         if (jsonobject.has(s)) {
             return c(jsonobject.get(s), s);
@@ -100,6 +106,7 @@ public class ChatDeserializer {
         return jsonobject.has(s) ? c(jsonobject.get(s), s) : flag;
     }
 
+    public static float asFloat(JsonElement jsonElement, String key) { return e(jsonElement, key); } // Paper - OBFHELPER
     public static float e(JsonElement jsonelement, String s) {
         if (jsonelement.isJsonPrimitive() && jsonelement.getAsJsonPrimitive().isNumber()) {
             return jsonelement.getAsFloat();
@@ -108,6 +115,7 @@ public class ChatDeserializer {
         }
     }
 
+    public static float getFloat(JsonObject jsonObject, String key) { return l(jsonObject, key); } // Paper - OBFHELPER
     public static float l(JsonObject jsonobject, String s) {
         if (jsonobject.has(s)) {
             return e(jsonobject.get(s), s);
@@ -128,6 +136,7 @@ public class ChatDeserializer {
         }
     }
 
+    public static long getLong(JsonObject jsonObject, String key) { return m(jsonObject, key); } // Paper - OBFHELPER
     public static long m(JsonObject jsonobject, String s) {
         if (jsonobject.has(s)) {
             return f(jsonobject.get(s), s);
@@ -140,6 +149,7 @@ public class ChatDeserializer {
         return jsonobject.has(s) ? f(jsonobject.get(s), s) : i;
     }
 
+    public static int asInt(JsonElement jsonElement, String key) { return g(jsonElement, key); } // Paper - OBFHELPER
     public static int g(JsonElement jsonelement, String s) {
         if (jsonelement.isJsonPrimitive() && jsonelement.getAsJsonPrimitive().isNumber()) {
             return jsonelement.getAsInt();
@@ -148,6 +158,7 @@ public class ChatDeserializer {
         }
     }
 
+    public static int getInt(JsonObject jsonObject, String key) { return n(jsonObject, key); } // Paper - OBFHELPER
     public static int n(JsonObject jsonobject, String s) {
         if (jsonobject.has(s)) {
             return g(jsonobject.get(s), s);
@@ -172,6 +183,7 @@ public class ChatDeserializer {
         return jsonobject.has(s) ? h(jsonobject.get(s), s) : b0;
     }
 
+    public static JsonObject asJsonObject(JsonElement jsonElement, String name) { return m(jsonElement, name); } // Paper - OBFHELPER
     public static JsonObject m(JsonElement jsonelement, String s) {
         if (jsonelement.isJsonObject()) {
             return jsonelement.getAsJsonObject();
@@ -180,6 +192,7 @@ public class ChatDeserializer {
         }
     }
 
+    public static JsonObject getJsonObject(JsonObject jsonObject, String key) { return t(jsonObject, key); } // Paper - OBFHELPER
     public static JsonObject t(JsonObject jsonobject, String s) {
         if (jsonobject.has(s)) {
             return m(jsonobject.get(s), s);
@@ -192,6 +205,7 @@ public class ChatDeserializer {
         return jsonobject.has(s) ? m(jsonobject.get(s), s) : jsonobject1;
     }
 
+    public static JsonArray asJsonArray(JsonElement jsonElement, String name) { return n(jsonElement, name); } // Paper - OBFHELPER
     public static JsonArray n(JsonElement jsonelement, String s) {
         if (jsonelement.isJsonArray()) {
             return jsonelement.getAsJsonArray();
@@ -200,6 +214,7 @@ public class ChatDeserializer {
         }
     }
 
+    public static JsonArray getJsonArray(JsonObject jsonObject, String key) { return u(jsonObject, key); } // Paper - OBFHELPER
     public static JsonArray u(JsonObject jsonobject, String s) {
         if (jsonobject.has(s)) {
             return n(jsonobject.get(s), s);
@@ -213,6 +228,7 @@ public class ChatDeserializer {
         return jsonobject.has(s) ? n(jsonobject.get(s), s) : jsonarray;
     }
 
+    public static <T> T asDeserializedType(@Nullable JsonElement jsonElement, String name, JsonDeserializationContext context, Class<? extends T> type) { return a(jsonElement, name, context, type); } // Paper - OBFHELPER
     public static <T> T a(@Nullable JsonElement jsonelement, String s, JsonDeserializationContext jsondeserializationcontext, Class<? extends T> oclass) {
         if (jsonelement != null) {
             return jsondeserializationcontext.deserialize(jsonelement, oclass);
@@ -221,6 +237,7 @@ public class ChatDeserializer {
         }
     }
 
+    public static <T> T getDeserializedType(JsonObject jsonObject, String key, JsonDeserializationContext context, Class<? extends T> type) { return a(jsonObject, key, context, type); } // Paper - OBFHELPER
     public static <T> T a(JsonObject jsonobject, String s, JsonDeserializationContext jsondeserializationcontext, Class<? extends T> oclass) {
         if (jsonobject.has(s)) {
             return a(jsonobject.get(s), s, jsondeserializationcontext, oclass);
diff --git a/src/main/java/net/minecraft/server/CriterionConditionPlayer.java b/src/main/java/net/minecraft/server/CriterionConditionPlayer.java
index e0f8e36085ef47a7b26cbe0f47dd7de7f4f39a08..996772a54f62585bccc640fda1b8a6f0c476028c 100644
--- a/src/main/java/net/minecraft/server/CriterionConditionPlayer.java
+++ b/src/main/java/net/minecraft/server/CriterionConditionPlayer.java
@@ -80,7 +80,7 @@ public class CriterionConditionPlayer {
                 ObjectIterator objectiterator = this.e.object2BooleanEntrySet().iterator();
 
                 while (objectiterator.hasNext()) {
-                    it.unimi.dsi.fastutil.objects.Object2BooleanMap.Entry<MinecraftKey> it_unimi_dsi_fastutil_objects_object2booleanmap_entry = (it.unimi.dsi.fastutil.objects.Object2BooleanMap.Entry) objectiterator.next();
+                    Object2BooleanMap.Entry<MinecraftKey> it_unimi_dsi_fastutil_objects_object2booleanmap_entry = (Object2BooleanMap.Entry) objectiterator.next(); // Paper - decompile fix
 
                     if (recipebookserver.hasDiscoveredRecipe((MinecraftKey) it_unimi_dsi_fastutil_objects_object2booleanmap_entry.getKey()) != it_unimi_dsi_fastutil_objects_object2booleanmap_entry.getBooleanValue()) {
                         return false;
@@ -167,6 +167,7 @@ public class CriterionConditionPlayer {
         }
     }
 
+    public static <T> Statistic<T> getStat(StatisticWrapper<T> statisticWrapper, MinecraftKey minecraftKey) { return a(statisticWrapper, minecraftKey); } // Paper - OBFHELPER
     private static <T> Statistic<T> a(StatisticWrapper<T> statisticwrapper, MinecraftKey minecraftkey) {
         IRegistry<T> iregistry = statisticwrapper.getRegistry();
         T t0 = iregistry.get(minecraftkey);
@@ -178,6 +179,7 @@ public class CriterionConditionPlayer {
         }
     }
 
+    public static <T> MinecraftKey getKey(Statistic<T> statistic) { return a(statistic); } // Paper - OBFHELPER
     private static <T> MinecraftKey a(Statistic<T> statistic) {
         return statistic.getWrapper().getRegistry().getKey(statistic.b());
     }
@@ -211,16 +213,18 @@ public class CriterionConditionPlayer {
 
             if (!this.e.isEmpty()) {
                 jsonobject1 = new JsonObject();
+                JsonObject finalJsonobject = jsonobject1; // Paper - decompile fix
                 this.e.forEach((minecraftkey, obool) -> {
-                    jsonobject1.addProperty(minecraftkey.toString(), obool);
+                    finalJsonobject.addProperty(minecraftkey.toString(), obool); // Paper - decompile fix
                 });
                 jsonobject.add("recipes", jsonobject1);
             }
 
             if (!this.f.isEmpty()) {
                 jsonobject1 = new JsonObject();
+                JsonObject finalJsonobject1 = jsonobject1; // Paper - decompile fix
                 this.f.forEach((minecraftkey, criterionconditionplayer_c) -> {
-                    jsonobject1.add(minecraftkey.toString(), criterionconditionplayer_c.a());
+                    finalJsonobject1.add(minecraftkey.toString(), criterionconditionplayer_c.a()); // Paper - decompile fix
                 });
                 jsonobject.add("advancements", jsonobject1);
             }
@@ -269,7 +273,7 @@ public class CriterionConditionPlayer {
         public boolean test(AdvancementProgress advancementprogress) {
             ObjectIterator objectiterator = this.a.object2BooleanEntrySet().iterator();
 
-            it.unimi.dsi.fastutil.objects.Object2BooleanMap.Entry it_unimi_dsi_fastutil_objects_object2booleanmap_entry;
+            Object2BooleanMap.Entry it_unimi_dsi_fastutil_objects_object2booleanmap_entry; // Paper - decompile fix
             CriterionProgress criterionprogress;
 
             do {
@@ -277,7 +281,7 @@ public class CriterionConditionPlayer {
                     return true;
                 }
 
-                it_unimi_dsi_fastutil_objects_object2booleanmap_entry = (it.unimi.dsi.fastutil.objects.Object2BooleanMap.Entry) objectiterator.next();
+                it_unimi_dsi_fastutil_objects_object2booleanmap_entry = (Object2BooleanMap.Entry) objectiterator.next(); // Paper - decompile fix
                 criterionprogress = advancementprogress.getCriterionProgress((String) it_unimi_dsi_fastutil_objects_object2booleanmap_entry.getKey());
             } while (criterionprogress != null && criterionprogress.a() == it_unimi_dsi_fastutil_objects_object2booleanmap_entry.getBooleanValue());
 
diff --git a/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancement.java b/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancement.java
index a5aadf2850f273e258f84b6c7bc9ca3649fb884d..a9a1cdf462972c0a6049422cfd97dce09423fc43 100644
--- a/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancement.java
+++ b/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancement.java
@@ -8,10 +8,18 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 
 public class CraftAdvancement implements org.bukkit.advancement.Advancement {
 
-    private final Advancement handle;
+    private Advancement handle; // Papoer
 
-    public CraftAdvancement(Advancement handle) {
+    public CraftAdvancement(Advancement handle, NamespacedKey key) { // Paper
         this.handle = handle;
+        // Paper start
+        this.key = key;
+        CraftSerializedAdvancement serializedAdvancement = io.papermc.paper.advancements.CraftAdvancementsManager.getGson().fromJson(handle.getSerializedAdvancement().toJson(), CraftSerializedAdvancement.class);
+        this.advancementDisplay = serializedAdvancement.advancementDisplay;
+        this.advancementRewards = serializedAdvancement.advancementRewards;
+        this.triggerMap = serializedAdvancement.triggerMap;
+        this.requirements = serializedAdvancement.requirements;
+        // Paper end
     }
 
     public Advancement getHandle() {
@@ -20,11 +28,132 @@ public class CraftAdvancement implements org.bukkit.advancement.Advancement {
 
     @Override
     public NamespacedKey getKey() {
-        return CraftNamespacedKey.fromMinecraft(handle.getName());
+        return key; // Paper
     }
 
     @Override
     public Collection<String> getCriteria() {
         return Collections.unmodifiableCollection(handle.getCriteria().keySet());
     }
+    // Paper start
+    private final NamespacedKey key;
+    private org.bukkit.advancement.Advancement parent;
+    private io.papermc.paper.advancements.AdvancementDisplay advancementDisplay;
+    private final io.papermc.paper.advancements.AdvancementRewards advancementRewards;
+    private final java.util.Map<String, io.papermc.paper.advancements.triggers.Trigger> triggerMap;
+    private final String[][] requirements;
+
+    /*public CraftAdvancement(NamespacedKey key) {
+        this.key = key;
+        this.advancementDisplay = new io.papermc.paper.advancements.AdvancementDisplay();
+        this.advancementRewards = new io.papermc.paper.advancements.AdvancementRewards();
+        this.triggerMap = new java.util.HashMap<>();
+    }*/
+
+    @Override
+    public org.bukkit.advancement.Advancement getParent() {
+        return parent;
+    }
+
+    @Override
+    public void setParent(org.bukkit.advancement.Advancement parent) {
+        this.parent = parent;
+    }
+
+    @Override
+    public io.papermc.paper.advancements.AdvancementDisplay getAdvancementDisplay() {
+        return advancementDisplay;
+    }
+
+    @Override
+    public io.papermc.paper.advancements.AdvancementRewards getAdvancementRewards() {
+        return advancementRewards;
+    }
+
+    @Override
+    public java.util.Map<String, io.papermc.paper.advancements.triggers.Trigger> getTriggers() {
+        return triggerMap;
+    }
+
+    @Override
+    public String[][] getRequirements() {
+        return new String[0][];
+    }
+
+    public static class CraftSerializedAdvancement {
+        private final io.papermc.paper.advancements.AdvancementDisplay advancementDisplay;
+        private final io.papermc.paper.advancements.AdvancementRewards advancementRewards;
+        private final java.util.Map<String, io.papermc.paper.advancements.triggers.Trigger> triggerMap;
+        private final String[][] requirements;
+
+        public CraftSerializedAdvancement(io.papermc.paper.advancements.AdvancementDisplay advancementDisplay, io.papermc.paper.advancements.AdvancementRewards advancementRewards, java.util.Map<String, io.papermc.paper.advancements.triggers.Trigger> triggerMap, String[][] requirements) {
+            this.advancementDisplay = advancementDisplay;
+            this.advancementRewards = advancementRewards;
+            this.triggerMap = triggerMap;
+            this.requirements = requirements;
+        }
+    }
+
+    public static class AdvancementSerialization implements com.google.gson.JsonDeserializer<CraftSerializedAdvancement> {
+
+        private static final String DISPLAY = "display";
+        private static final String PARENT = "parent";
+        private static final String CRITERIA = "criteria";
+        private static final String REQUIREMENTS = "requirements";
+        private static final String REWARDS = "rewards";
+
+        private static final String CONDITIONS = "conditions";
+
+        @Override
+        public CraftSerializedAdvancement deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {
+            com.google.gson.JsonObject jsonObject = json.getAsJsonObject();
+            io.papermc.paper.advancements.AdvancementDisplay advancementDisplay = context.deserialize(jsonObject.get(DISPLAY), io.papermc.paper.advancements.AdvancementDisplay.class);
+            io.papermc.paper.advancements.AdvancementRewards advancementRewards = context.deserialize(jsonObject.get(REWARDS), io.papermc.paper.advancements.AdvancementRewards.class);
+
+            java.util.Map<String, io.papermc.paper.advancements.triggers.Trigger> triggerMap = new java.util.HashMap<>();
+            com.google.gson.JsonObject critieraObj = jsonObject.getAsJsonObject(CRITERIA);
+            critieraObj.entrySet().forEach(entry -> {
+                com.google.gson.JsonObject triggerObj = net.minecraft.server.ChatDeserializer.asJsonObject(entry.getValue(), "trigger");
+                NamespacedKey triggerKey = io.papermc.paper.advancements.AdvancementTriggers.getTrigerKey(triggerObj);
+                if (!io.papermc.paper.advancements.AdvancementTriggers.TRIGGER_MAP.containsKey(triggerKey)) {
+                    throw new com.google.gson.JsonParseException("Did not recognize trigger '" + triggerKey + "'");
+                }
+                io.papermc.paper.advancements.triggers.Trigger trigger;
+                if (!triggerObj.has(CONDITIONS)) {
+                    if (triggerKey.equals(io.papermc.paper.advancements.triggers.ImpossibleTrigger.KEY)) {
+                        trigger = new io.papermc.paper.advancements.triggers.ImpossibleTrigger();
+                    } else if (triggerKey.equals(io.papermc.paper.advancements.triggers.TickTrigger.KEY)) {
+                        trigger = new io.papermc.paper.advancements.triggers.TickTrigger();
+                    } else {
+                        throw new com.google.gson.JsonParseException("Could not find conditions for '" + triggerObj + "'");
+                    }
+                } else {
+                    trigger = context.deserialize(net.minecraft.server.ChatDeserializer.getJsonObject(triggerObj, CONDITIONS), io.papermc.paper.advancements.AdvancementTriggers.TRIGGER_MAP.get(triggerKey).getTriggerClass());
+                }
+                triggerMap.put(entry.getKey(), trigger);
+            });
+
+            com.google.gson.JsonArray ands = io.papermc.paper.util.PaperChatDeserializer.getJsonArrayOrDefault(jsonObject, REQUIREMENTS, new com.google.gson.JsonArray());
+            String[][] requirements = new String[ands.size()][];
+            for (int i = 0; i < ands.size(); i++) {
+                com.google.gson.JsonArray ors = net.minecraft.server.ChatDeserializer.asJsonArray(ands.get(i), REQUIREMENTS + "[" + i + "]");
+                requirements[i] = new String[ors.size()];
+                for (int j = 0; j < ors.size(); j++) {
+                    requirements[i][j] = net.minecraft.server.ChatDeserializer.getStringRaw(ors.get(j), REQUIREMENTS + "[" + i + "][" + j + "]");
+                }
+            }
+            if (requirements.length == 0) {
+                requirements = new String[triggerMap.size()][];
+
+                int i = 0;
+                for (String s : triggerMap.keySet()) {
+                    requirements[i] = new String[] { s };
+                    i++;
+                }
+            }
+
+            return new CraftSerializedAdvancement(advancementDisplay, advancementRewards, triggerMap, requirements);
+        }
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionEffectType.java b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionEffectType.java
index 082b0fdf908f6728b940fd9f3fd5e0aecfa1af15..4c47f4f3df00af0b39f3e433c656ba793aac66d6 100644
--- a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionEffectType.java
+++ b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionEffectType.java
@@ -102,4 +102,10 @@ public class CraftPotionEffectType extends PotionEffectType {
     public Color getColor() {
         return Color.fromRGB(handle.getColor());
     }
+    // Paper start
+    @Override
+    public org.bukkit.NamespacedKey getKey() {
+        return org.bukkit.craftbukkit.util.CraftNamespacedKey.fromMinecraft(net.minecraft.server.IRegistry.MOB_EFFECT.getKey(this.handle));
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 0f7f1503d07bdff7ce7644dfe21e444adb52c7db..2795f21e196d982d225e4378954b6cbb0a079680 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -91,6 +91,8 @@ public final class CraftMagicNumbers implements UnsafeValues {
     private static final Map<Material, Item> MATERIAL_ITEM = new HashMap<>();
     private static final Map<Material, Block> MATERIAL_BLOCK = new HashMap<>();
     private static final Map<Material, FluidType> MATERIAL_FLUID = new HashMap<>();
+    private static final Map<org.bukkit.entity.EntityType, net.minecraft.server.EntityTypes<?>> ENTITY_TYPE_ENTITY_TYPES = new HashMap<>(); // Paper
+    private static final Map<net.minecraft.server.EntityTypes<?>, org.bukkit.entity.EntityType> ENTITY_TYPES_ENTITY_TYPE = new HashMap<>(); // Paper
 
     static {
         for (Block block : IRegistry.BLOCK) {
@@ -121,8 +123,23 @@ public final class CraftMagicNumbers implements UnsafeValues {
                 MATERIAL_FLUID.put(material, fluid);
             });
         }
+        // Paper start
+        for (org.bukkit.entity.EntityType type : org.bukkit.entity.EntityType.values()) {
+            if (type == org.bukkit.entity.EntityType.UNKNOWN) continue;
+            ENTITY_TYPE_ENTITY_TYPES.put(type, IRegistry.ENTITY_TYPE.get(CraftNamespacedKey.toMinecraft(type.getKey())));
+            ENTITY_TYPES_ENTITY_TYPE.put(IRegistry.ENTITY_TYPE.get(CraftNamespacedKey.toMinecraft(type.getKey())), type);
+        }
+    }
+
+    public static net.minecraft.server.EntityTypes<?> getEntityTypes(org.bukkit.entity.EntityType type) {
+        return ENTITY_TYPE_ENTITY_TYPES.get(type);
     }
 
+    public static org.bukkit.entity.EntityType getEntityType(net.minecraft.server.EntityTypes<?> entityTypes) {
+        return ENTITY_TYPES_ENTITY_TYPE.get(entityTypes);
+    }
+    // Paper end
+
     public static Material getMaterial(Block block) {
         return BLOCK_MATERIAL.get(block);
     }
